openapi: 3.0.3
info:
  title: NodeAPI @ Admin
  version: '1.0'
  description: Internal API for managing peers on vpn core nodes
  contact:
    name: Sergey Kovalev
    email: kovalevss@sibedge.com
paths:
  /api/tunnel/admin/peers:
    get:
      summary: Get list of peers
      operationId: admin-list-peers
      tags:
        - peers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PeerRecord'
        '401':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '403':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'
    post:
      summary: Create peer
      operationId: admin-create-peer
      tags:
        - peers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Peer'
      responses:
        '200':
          $ref: '#/components/responses/PeerInfo'
        '400':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '401':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '403':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '409':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '507':
          $ref: 'common.yaml#/components/responses/ResponseError'

  '/api/tunnel/admin/peers/{id}':
    get:
      summary: Get peer info
      operationId: admin-get-peer
      tags:
        - peers
      responses:
        '200':
          $ref: '#/components/responses/PeerInfo'
        '401':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '403':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '404':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'
    put:
      summary: Update peer
      operationId: admin-update-peer
      tags:
        - peers
      responses:
        '200':
          $ref: '#/components/responses/PeerInfo'
        '400':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '401':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '403':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '404':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '409':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Peer'

    delete:
      summary: Delete peer
      operationId: admin-delete-peer
      tags:
        - peers
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/OperationSuccessful'
        '401':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '403':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '404':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'

    parameters:
      - schema:
          type: integer
          format: int64
          minimum: 1
          example: 42
        name: id
        in: path
        required: true

  /api/tunnel/admin/settings:
    get:
      summary: Get current server settings
      operationId: admin-get-settings
      tags:
        - settings
      responses:
        '200':
          $ref: '#/components/responses/SettingsInfo'
        '401':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '403':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '404':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'

    patch:
      summary: Update server settings
      operationId: admin-update-settings
      tags:
        - settings
      responses:
        '200':
          $ref: '#/components/responses/SettingsInfo'
        '400':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '401':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '403':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'

  /api/tunnel/admin/auth:
    get:
      summary: Authorize as the node admin
      operationId: admin-do-auth
      tags:
        - common
      responses:
        '200':
          $ref: '#/components/responses/AdminAuthResponse'
        '401':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '404':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'

      security:
        - Basic_auth: []
        - Token_auth: []

  /api/tunnel/admin/reload:
    get:
      summary: Reloads service with new configuration
      operationId: admin-reload-service
      tags:
        - common
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/OperationSuccessful'
        '401':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '403':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'

  /api/tunnel/admin/status:
    get:
      summary: Get current service status
      operationId: admin-get-status
      tags:
        - common
      responses:
        '200':
          $ref: '#/components/responses/ServiceStatusResponse'
        '401':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '403':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'

  /api/tunnel/admin/initial-setup:
    post:
      summary: Set initial parameters
      operationId: admin-initial-setup
      tags:
        - settings
      # empty security because this handle must be public
      # (at least for the very first call).
      security: []
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/OperationSuccessful'
        '400':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '401':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '403':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '409':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitialSetupRequest'

  '/api/tunnel/admin/connection-info/wireguard':
    get:
      operationId: admin-connection-info-wireguard
      summary: Get peer-independent wireguard configuration from a server
      tags:
        - connection-info
      responses:
        '200':
          $ref: '#/components/responses/ServerWireguardOptions'
        '401':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '409':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'

  '/api/tunnel/admin/ip-pool/suggest':
    get:
      summary: Suggest an available IP address by the server pool
      operationId: admin-ippool-suggest
      tags:
        - ippool
      responses:
        '200':
          $ref: '#/components/responses/IpPoolSuggestResult'
        '404':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '409':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'
    post:
      operationId: admin-ippool-is-used
      summary: Check that the IP address is used by the server pool
      tags:
        - ippool
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/OperationSuccessful'
        '404':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '409':
          $ref: 'common.yaml#/components/responses/ResponseError'
        '500':
          $ref: 'common.yaml#/components/responses/ResponseError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IpPoolAddress'

components:
  schemas:
    Settings:
      title: Settings
      type: object
      x-examples:
        example-read:
          value:
            log_level: debug
            admin_user_name: admin
            wireguard_listen_port: 3000
            wireguard_keepalive: 60
            wireguard_subnet: 10.42.0.0/16
            wireguard_server_ipv4: 1.2.3.4
            wireguard_server_port: 3000
            wireguard_public_key: n4btQ30d0OxK12rIzbN5mWk2MGZm8EWxrrk6LFro320=
            ping_interval: 300
            connection_timeout: 600
            http_listen_addr: '0.0.0.0:80'
            dns:
              - 192.168.0.1
        example-write:
          value:
            log_level: debug
            admin_user_name: admin
            admin_password: My$uperp@$$@0rd
            wireguard_listen_port: 3000
            wireguard_keepalive: 60
            wireguard_subnet: 10.42.0.0/16
            wireguard_server_ipv4: 1.2.3.4
            wireguard_server_port: 3000
            ping_interval: 300
            connection_timeout: 600
            http_listen_addr: '0.0.0.0:80'
            dns:
              - 192.168.0.1
      description: Server-side configuration.
      properties:
        log_level:
          type: string
          enum:
            - debug
            - info
            - warning
            - error
          example: debug
          description: Logging level.
        admin_user_name:
          type: string
          example: admin
          description: Admin username.
        admin_password:
          type: string
          format: password
          description: 'Admin password (write-only, never returned).'
          example: My$uperp@$$@0rd
          writeOnly: true
        wireguard_listen_port:
          type: integer
          minimum: 1
          maximum: 65535
          example: 3000
          description: |
            Wireguard listen port inside the container.
            In 99% cases it matches the `wireguard_server_port` value.
        wireguard_server_port:
          type: integer
          minimum: 1
          maximum: 65535
          example: 3000
          description: |
            Public UDP port of a wireguard server.
            This value is announced to peers, in 99% cases it is the same as the `wireguard_listen_port`.
            May differs from the `wireguard_listen_port`'s value if NATed (especially with docker).
        wireguard_keepalive:
          type: integer
          minimum: 1
          example: 60
          description: Keepalive interval for wireguard peers.
        wireguard_subnet:
          type: string
          example: 10.42.0.0/16
          description: Subnet for wireguard peers.
        wireguard_server_ipv4:
          type: string
          example: 1.2.3.4
          format: ipv4
          description: Public ipv4 address of a wireguard server.
        wireguard_public_key:
          type: string
          example: n4btQ30d0OxK12rIzbN5mWk2MGZm8EWxrrk6LFro320=
          minLength: 44
          maxLength: 44
          description: Wireguard public key (read only).
          readOnly: true
        ping_interval:
          type: integer
          example: 300
          minimum: 1
        connection_timeout:
          type: integer
          example: 600
          minimum: 1
        http_listen_addr:
          type: string
          example: '0.0.0.0:80'
          description: 'HTTP listening IP:Port pair.'
        dns:
          type: array
          description: DNS servers to announce to a peer
          items:
            type: string
            format: ipv4
    AdminAuth:
      title: ResponseAdminAuth
      type: object
      properties:
        access_token:
          type: string
          description: JWT for accessing other administrative endpoints.
          readOnly: true
      required:
        - access_token
    ServiceStatus:
      title: ServiceStatusResponse
      type: object
      description: Holds current staus flags of the service
      properties:
        restart_required:
          type: boolean
          description: 'Indicate, whether service requires restart to apply latest settings.'
      required:
        - restart_required
    Peer:
      type: object
      title: Peer
      description: Peer representation.
      x-examples:
        example:
          value:
            id: 42
            label: Home PC
            type: wireguard
            info_wireguard:
              public_key: ljs1lRH1YtZPlppYl1gQVX+JTNmTQsX57cIDf7oB6Qc=
            ipv4: 10.42.3.33
            created: '2021-05-28T13:23:15Z'
            updated: '2021-05-28T13:23:15Z'
            expires: '2021-05-28T13:43:10Z'
            peer_id: 46a6dbb2-1cc6-48e7-8374-0d386c3f17f0
            claims: string
      properties:
        label:
          type: string
          description: Label of the peer.
          example: Home PC
          nullable: true
        type:
          $ref: 'tunnel.yaml#/components/schemas/PeerType'
        info_wireguard:
          $ref: 'tunnel.yaml#/components/schemas/PeerWireguard'
        identifiers:
          $ref: 'common.yaml#/components/schemas/ConnectionIdentifiers'
        claims:
          type: string
          description: JWT information data.
          nullable: true
        ipv4:
          type: string
          format: ipv4
          description: Tunneling IPv4 address of a peer.
          example: 10.42.3.33
          nullable: true
        expires:
          type: string
          format: date-time
          example: '2021-05-28T13:43:10Z'
          description: Peer expiration time.
          nullable: true
        created:
          type: string
          format: date-time
          description: The date when the peer was created.
          example: '2021-05-28T13:23:15Z'
        updated:
          type: string
          format: date-time
          description: The date when the peer was updated last time.
          example: '2021-05-28T13:23:15Z'
    PeerRecord:
      title: Peer repr for a list responses
      type: object
      example:
        id: 42
        peer:
          label: Home PC
          type: wireguard
          info_wireguard:
            public_key: ljs1lRH1YtZPlppYl1gQVX+JTNmTQsX57cIDf7oB6Qc=
          identifiers:
            user_id: Project/Authorizer/user@org
            installation_id: d1a1b2e2-d84b-4537-9a93-c4d3cd412598
            session_id: de9e0337-fb16-4669-b07d-9f261c329461
          claims: string
          ipv4: 10.42.3.33
          expires: '2021-05-28T13:43:10Z'
          created: '2021-05-28T13:23:15Z'
          updated: '2021-05-28T13:23:15Z'
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          example: 42
        peer:
          $ref: '#/components/schemas/Peer'
      required:
        - id
        - peer
    InitialSetupRequest:
      title: initial setup request
      type: object
      properties:
        admin_password:
          type: string
        server_ip_mask:
          type: string
        enable_ssl:
           type: boolean
        domain_name:
          type: string
      required:
        - admin_password
        - server_ip_mask
        - enable_ssl
        - domain_name
    IpPoolAddress:
      title: ""
      properties:
        ip_address:
          type: string
      required:
        - ip_address

  responses:
    PeerInfo:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Peer'
    SettingsInfo:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Settings'
    ServerWireguardOptions:
      description: Peer-independent wireguard configuration from a server
      content:
        application/json:
          schema:
            properties:
              subnet:
                description: "Network subnet/mask for wireguard clients, e.g 10.235.0.0/24"
                type: string
              server_public_key:
                type: string
                minLength: 44
                maxLength: 44
                example: b0o7b8vXx9EH3uLJucOJUed0slvSppv7RCmC8jXRr1o=
                description: Server public key.
              server_ipv4:
                type: string
                format: ipv4
                example: 1.2.3.4
                description: Public IPv4 of a wireguard server.
              server_port:
                type: integer
                minimum: 1
                maximum: 65535
                example: 3000
                description: Public wireguard port.
              keepalive:
                type: integer
                minimum: 0
                maximum: 3600
                example: 60
                description: Keepalive interval to be set on client side.
              allowed_ips:
                type: array
                description: 'List of subnets, allowed to be sent to tunnel.'
                items:
                  type: string
                  example: 0.0.0.0/0
              dns:
                type: array
                description: List of DNS servers.
                items:
                  type: string
                  format: ipv4
            required:
              - server_public_key
              - server_ipv4
              - server_port
              - keepalive
              - allowed_ips
              - dns
              - subnet
    IpPoolSuggestResult:
      description: returns suggested IP address
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IpPoolAddress'
    AdminAuthResponse:
      description: return credentials of authorized session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdminAuth'
    ServiceStatusResponse:
      description: "returns current status flags"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceStatus'

  securitySchemes:
    Token_auth:
      type: http
      scheme: bearer
    Basic_auth:
      type: http
      scheme: basic

security:
  - Token_auth: []

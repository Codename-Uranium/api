// Package tunnel provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package tunnel

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	Basic_authScopes     = "Basic_auth.Scopes"
	Federation_keyScopes = "Federation_key.Scopes"
	Token_authScopes     = "Token_auth.Scopes"
)

// Defines values for PeerType.
const (
	PeerTypeWireguard PeerType = "wireguard"
)

// Defines values for SettingsLogLevel.
const (
	SettingsLogLevelDebug SettingsLogLevel = "debug"

	SettingsLogLevelError SettingsLogLevel = "error"

	SettingsLogLevelInfo SettingsLogLevel = "info"

	SettingsLogLevelWarning SettingsLogLevel = "warning"
)

// AdminAuthResponse defines model for AdminAuthResponse.
type AdminAuthResponse struct {
	// JWT for accessing other administrative endpoints.
	AccessToken string `json:"access_token"`
}

// Information to configure client on client side.
type ClientConnectResponse struct {
	// Connection information for wireguard peers.
	InfoWireguard *ConnectInfoWireguard `json:"info_wireguard,omitempty"`
}

// Connection information for wireguard peers.
type ConnectInfoWireguard struct {
	// Array of subnet, allowed to be sent to tunnel.
	AllowedIps []string `json:"allowed_ips"`

	// List of DNS servers.
	Dns []string `json:"dns"`

	// Keepalive interval to be set on client side.
	Keepalive    int `json:"keepalive"`
	PingInterval int `json:"ping_interval"`

	// Public IPv4 of a wireguard server.
	ServerIpv4 string `json:"server_ipv4"`

	// Public wireguard port.
	ServerPort int `json:"server_port"`

	// Server public key.
	ServerPublicKey string `json:"server_public_key"`

	// Client's tunnel IPv4 address.
	TunnelIpv4 string `json:"tunnel_ipv4"`
}

// ConnectionIdentifiers defines model for ConnectionIdentifiers.
type ConnectionIdentifiers struct {
	InstallationId *string `json:"installation_id"`
	SessionId      *string `json:"session_id"`
	UserId         *string `json:"user_id"`
}

// Generic error response.
type Error struct {
	// Message, which we can put to application logs.
	Details *string `json:"details,omitempty"`

	// User-friendly error description.
	Error *string `json:"error,omitempty"`

	// The name of field, caused error.
	Field *string `json:"field,omitempty"`

	// Machine-readable error code.
	Result string `json:"result"`
}

// Peer representation.
type Peer struct {
	// JWT information data.
	Claims *string `json:"claims"`

	// The date when the peer was created.
	Created *time.Time `json:"created,omitempty"`

	// Peer expiration time.
	Expires     *time.Time             `json:"expires"`
	Identifiers *ConnectionIdentifiers `json:"identifiers,omitempty"`

	// Wireguard-specific tunnel information.
	InfoWireguard *PeerWireguard `json:"info_wireguard,omitempty"`

	// Tunneling IPv4 address of a peer.
	Ipv4 *string `json:"ipv4"`

	// Label of the peer.
	Label *string `json:"label"`

	// Peer tunnel type.
	Type *PeerType `json:"type,omitempty"`

	// The date when the peer was updated last time.
	Updated *time.Time `json:"updated,omitempty"`
}

// PeerRecord defines model for PeerRecord.
type PeerRecord struct {
	Id int64 `json:"id"`

	// Peer representation.
	Peer Peer `json:"peer"`
}

// Peer tunnel type.
type PeerType string

// Wireguard-specific tunnel information.
type PeerWireguard struct {
	// Wireguard public key.
	PublicKey *string `json:"public_key,omitempty"`
}

// Current operation status.
type ServiceStatusResponse struct {
	// Indicate, whether service requires restart to apply latest settings.
	RestartRequired bool `json:"restart_required"`
}

// Server-side configuration.
type Settings struct {
	// Admin password (write-only, never returned).
	AdminPassword *string `json:"admin_password,omitempty"`

	// Admin username.
	AdminUserName     *string `json:"admin_user_name,omitempty"`
	ConnectionTimeout *int    `json:"connection_timeout,omitempty"`

	// Array of DNS servers.
	Dns *[]string `json:"dns,omitempty"`

	// HTTP listening IP:Port pair.
	HttpListenAddr *string `json:"http_listen_addr,omitempty"`

	// Logging level.
	LogLevel     *SettingsLogLevel `json:"log_level,omitempty"`
	PingInterval *int              `json:"ping_interval,omitempty"`

	// Wireguard keepalive interval.
	WireguardKeepalive *int `json:"wireguard_keepalive,omitempty"`

	// Wireguard listening port.
	WireguardListenPort *int `json:"wireguard_listen_port,omitempty"`

	// Wireguard public key (read only).
	WireguardPublicKey *string `json:"wireguard_public_key,omitempty"`

	// Public ipv4 address of a wireguard server.
	WireguardServerIpv4 *string `json:"wireguard_server_ipv4,omitempty"`

	// Public UDP port of a wireguard server.
	WireguardServerPort *int `json:"wireguard_server_port,omitempty"`

	// Wireguard subnet.
	WireguardSubnet *string `json:"wireguard_subnet,omitempty"`
}

// Logging level.
type SettingsLogLevel string

// TrustedKey defines model for TrustedKey.
type TrustedKey string

// TrustedKeyRecord defines model for TrustedKeyRecord.
type TrustedKeyRecord struct {
	Id  string     `json:"id"`
	Key TrustedKey `json:"key"`
}

// Peer representation.
type PeerInfo Peer

// Generic error response.
type ResponseError Error

// Server-side configuration.
type SettingsInfo Settings

// ApiClientConnectJSONBody defines parameters for ApiClientConnect.
type ApiClientConnectJSONBody struct {
	Identifiers ConnectionIdentifiers `json:"identifiers"`

	// Wireguard-specific tunnel information.
	InfoWireguard *PeerWireguard `json:"info_wireguard,omitempty"`
	Location      *string        `json:"location,omitempty"`

	// Peer tunnel type.
	Type PeerType `json:"type"`
}

// ApiClientDisconnectJSONBody defines parameters for ApiClientDisconnect.
type ApiClientDisconnectJSONBody ConnectionIdentifiers

// ApiClientPingJSONBody defines parameters for ApiClientPing.
type ApiClientPingJSONBody ConnectionIdentifiers

// FederationUpdateKeyJSONBody defines parameters for FederationUpdateKey.
type FederationUpdateKeyJSONBody struct {
	Key string `json:"key"`
}

// AdminCreatePeerJSONBody defines parameters for AdminCreatePeer.
type AdminCreatePeerJSONBody Peer

// AdminUpdatePeerJSONBody defines parameters for AdminUpdatePeer.
type AdminUpdatePeerJSONBody Peer

// AdminUpdateSettingsJSONBody defines parameters for AdminUpdateSettings.
type AdminUpdateSettingsJSONBody Settings

// ApiClientConnectJSONRequestBody defines body for ApiClientConnect for application/json ContentType.
type ApiClientConnectJSONRequestBody ApiClientConnectJSONBody

// ApiClientDisconnectJSONRequestBody defines body for ApiClientDisconnect for application/json ContentType.
type ApiClientDisconnectJSONRequestBody ApiClientDisconnectJSONBody

// ApiClientPingJSONRequestBody defines body for ApiClientPing for application/json ContentType.
type ApiClientPingJSONRequestBody ApiClientPingJSONBody

// FederationUpdateKeyJSONRequestBody defines body for FederationUpdateKey for application/json ContentType.
type FederationUpdateKeyJSONRequestBody FederationUpdateKeyJSONBody

// AdminCreatePeerJSONRequestBody defines body for AdminCreatePeer for application/json ContentType.
type AdminCreatePeerJSONRequestBody AdminCreatePeerJSONBody

// AdminUpdatePeerJSONRequestBody defines body for AdminUpdatePeer for application/json ContentType.
type AdminUpdatePeerJSONRequestBody AdminUpdatePeerJSONBody

// AdminUpdateSettingsJSONRequestBody defines body for AdminUpdateSettings for application/json ContentType.
type AdminUpdateSettingsJSONRequestBody AdminUpdateSettingsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ApiClientConnect request with any body
	ApiClientConnectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiClientConnect(ctx context.Context, body ApiClientConnectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiClientDisconnect request with any body
	ApiClientDisconnectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiClientDisconnect(ctx context.Context, body ApiClientDisconnectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiClientPing request with any body
	ApiClientPingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApiClientPing(ctx context.Context, body ApiClientPingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FederationPing request
	FederationPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FederationUpdateKey request with any body
	FederationUpdateKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FederationUpdateKey(ctx context.Context, body FederationUpdateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminDoAuth request
	AdminDoAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminListPeers request
	AdminListPeers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminCreatePeer request with any body
	AdminCreatePeerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminCreatePeer(ctx context.Context, body AdminCreatePeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminDeletePeer request
	AdminDeletePeer(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminGetPeer request
	AdminGetPeer(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUpdatePeer request with any body
	AdminUpdatePeerWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUpdatePeer(ctx context.Context, id int64, body AdminUpdatePeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminReloadService request
	AdminReloadService(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminGetSettings request
	AdminGetSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUpdateSettings request with any body
	AdminUpdateSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUpdateSettings(ctx context.Context, body AdminUpdateSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminGetStatus request
	AdminGetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminListTrustedKeys request
	AdminListTrustedKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminDeleteTrustedKey request
	AdminDeleteTrustedKey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminGetTrustedKey request
	AdminGetTrustedKey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminAddTrustedKey request with any body
	AdminAddTrustedKeyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUpdateTrustedKey request with any body
	AdminUpdateTrustedKeyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ApiClientConnectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiClientConnectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiClientConnect(ctx context.Context, body ApiClientConnectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiClientConnectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiClientDisconnectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiClientDisconnectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiClientDisconnect(ctx context.Context, body ApiClientDisconnectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiClientDisconnectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiClientPingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiClientPingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiClientPing(ctx context.Context, body ApiClientPingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiClientPingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FederationPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFederationPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FederationUpdateKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFederationUpdateKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FederationUpdateKey(ctx context.Context, body FederationUpdateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFederationUpdateKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminDoAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminDoAuthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminListPeers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminListPeersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminCreatePeerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminCreatePeerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminCreatePeer(ctx context.Context, body AdminCreatePeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminCreatePeerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminDeletePeer(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminDeletePeerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminGetPeer(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminGetPeerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUpdatePeerWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUpdatePeerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUpdatePeer(ctx context.Context, id int64, body AdminUpdatePeerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUpdatePeerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminReloadService(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminReloadServiceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminGetSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminGetSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUpdateSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUpdateSettingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUpdateSettings(ctx context.Context, body AdminUpdateSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUpdateSettingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminGetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminListTrustedKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminListTrustedKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminDeleteTrustedKey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminDeleteTrustedKeyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminGetTrustedKey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminGetTrustedKeyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminAddTrustedKeyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminAddTrustedKeyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUpdateTrustedKeyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUpdateTrustedKeyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewApiClientConnectRequest calls the generic ApiClientConnect builder with application/json body
func NewApiClientConnectRequest(server string, body ApiClientConnectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiClientConnectRequestWithBody(server, "application/json", bodyReader)
}

// NewApiClientConnectRequestWithBody generates requests for ApiClientConnect with any type of body
func NewApiClientConnectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/client/connect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiClientDisconnectRequest calls the generic ApiClientDisconnect builder with application/json body
func NewApiClientDisconnectRequest(server string, body ApiClientDisconnectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiClientDisconnectRequestWithBody(server, "application/json", bodyReader)
}

// NewApiClientDisconnectRequestWithBody generates requests for ApiClientDisconnect with any type of body
func NewApiClientDisconnectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/client/disconnect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApiClientPingRequest calls the generic ApiClientPing builder with application/json body
func NewApiClientPingRequest(server string, body ApiClientPingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApiClientPingRequestWithBody(server, "application/json", bodyReader)
}

// NewApiClientPingRequestWithBody generates requests for ApiClientPing with any type of body
func NewApiClientPingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/client/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFederationPingRequest generates requests for FederationPing
func NewFederationPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/federation/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFederationUpdateKeyRequest calls the generic FederationUpdateKey builder with application/json body
func NewFederationUpdateKeyRequest(server string, body FederationUpdateKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFederationUpdateKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewFederationUpdateKeyRequestWithBody generates requests for FederationUpdateKey with any type of body
func NewFederationUpdateKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/federation/update-key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminDoAuthRequest generates requests for AdminDoAuth
func NewAdminDoAuthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tunnel/admin/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminListPeersRequest generates requests for AdminListPeers
func NewAdminListPeersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tunnel/admin/peers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminCreatePeerRequest calls the generic AdminCreatePeer builder with application/json body
func NewAdminCreatePeerRequest(server string, body AdminCreatePeerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminCreatePeerRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminCreatePeerRequestWithBody generates requests for AdminCreatePeer with any type of body
func NewAdminCreatePeerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tunnel/admin/peers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminDeletePeerRequest generates requests for AdminDeletePeer
func NewAdminDeletePeerRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tunnel/admin/peers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminGetPeerRequest generates requests for AdminGetPeer
func NewAdminGetPeerRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tunnel/admin/peers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminUpdatePeerRequest calls the generic AdminUpdatePeer builder with application/json body
func NewAdminUpdatePeerRequest(server string, id int64, body AdminUpdatePeerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUpdatePeerRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAdminUpdatePeerRequestWithBody generates requests for AdminUpdatePeer with any type of body
func NewAdminUpdatePeerRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tunnel/admin/peers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminReloadServiceRequest generates requests for AdminReloadService
func NewAdminReloadServiceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tunnel/admin/reload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminGetSettingsRequest generates requests for AdminGetSettings
func NewAdminGetSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tunnel/admin/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminUpdateSettingsRequest calls the generic AdminUpdateSettings builder with application/json body
func NewAdminUpdateSettingsRequest(server string, body AdminUpdateSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUpdateSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminUpdateSettingsRequestWithBody generates requests for AdminUpdateSettings with any type of body
func NewAdminUpdateSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tunnel/admin/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminGetStatusRequest generates requests for AdminGetStatus
func NewAdminGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tunnel/admin/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminListTrustedKeysRequest generates requests for AdminListTrustedKeys
func NewAdminListTrustedKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tunnel/admin/trusted")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminDeleteTrustedKeyRequest generates requests for AdminDeleteTrustedKey
func NewAdminDeleteTrustedKeyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tunnel/admin/trusted/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminGetTrustedKeyRequest generates requests for AdminGetTrustedKey
func NewAdminGetTrustedKeyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tunnel/admin/trusted/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminAddTrustedKeyRequestWithBody generates requests for AdminAddTrustedKey with any type of body
func NewAdminAddTrustedKeyRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tunnel/admin/trusted/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminUpdateTrustedKeyRequestWithBody generates requests for AdminUpdateTrustedKey with any type of body
func NewAdminUpdateTrustedKeyRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tunnel/admin/trusted/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ApiClientConnect request with any body
	ApiClientConnectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiClientConnectResponse, error)

	ApiClientConnectWithResponse(ctx context.Context, body ApiClientConnectJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiClientConnectResponse, error)

	// ApiClientDisconnect request with any body
	ApiClientDisconnectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiClientDisconnectResponse, error)

	ApiClientDisconnectWithResponse(ctx context.Context, body ApiClientDisconnectJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiClientDisconnectResponse, error)

	// ApiClientPing request with any body
	ApiClientPingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiClientPingResponse, error)

	ApiClientPingWithResponse(ctx context.Context, body ApiClientPingJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiClientPingResponse, error)

	// FederationPing request
	FederationPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FederationPingResponse, error)

	// FederationUpdateKey request with any body
	FederationUpdateKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FederationUpdateKeyResponse, error)

	FederationUpdateKeyWithResponse(ctx context.Context, body FederationUpdateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*FederationUpdateKeyResponse, error)

	// AdminDoAuth request
	AdminDoAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminDoAuthResponse, error)

	// AdminListPeers request
	AdminListPeersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminListPeersResponse, error)

	// AdminCreatePeer request with any body
	AdminCreatePeerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminCreatePeerResponse, error)

	AdminCreatePeerWithResponse(ctx context.Context, body AdminCreatePeerJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminCreatePeerResponse, error)

	// AdminDeletePeer request
	AdminDeletePeerWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*AdminDeletePeerResponse, error)

	// AdminGetPeer request
	AdminGetPeerWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*AdminGetPeerResponse, error)

	// AdminUpdatePeer request with any body
	AdminUpdatePeerWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUpdatePeerResponse, error)

	AdminUpdatePeerWithResponse(ctx context.Context, id int64, body AdminUpdatePeerJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUpdatePeerResponse, error)

	// AdminReloadService request
	AdminReloadServiceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminReloadServiceResponse, error)

	// AdminGetSettings request
	AdminGetSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminGetSettingsResponse, error)

	// AdminUpdateSettings request with any body
	AdminUpdateSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUpdateSettingsResponse, error)

	AdminUpdateSettingsWithResponse(ctx context.Context, body AdminUpdateSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUpdateSettingsResponse, error)

	// AdminGetStatus request
	AdminGetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminGetStatusResponse, error)

	// AdminListTrustedKeys request
	AdminListTrustedKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminListTrustedKeysResponse, error)

	// AdminDeleteTrustedKey request
	AdminDeleteTrustedKeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AdminDeleteTrustedKeyResponse, error)

	// AdminGetTrustedKey request
	AdminGetTrustedKeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AdminGetTrustedKeyResponse, error)

	// AdminAddTrustedKey request with any body
	AdminAddTrustedKeyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminAddTrustedKeyResponse, error)

	// AdminUpdateTrustedKey request with any body
	AdminUpdateTrustedKeyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUpdateTrustedKeyResponse, error)
}

type ApiClientConnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientConnectResponse
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ApiClientConnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiClientConnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiClientDisconnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ApiClientDisconnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiClientDisconnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiClientPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ApiClientPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiClientPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FederationPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		IfBytesRx float32 `json:"if_bytes_rx"`
		IfBytesTx float32 `json:"if_bytes_tx"`
		Sessions  float32 `json:"sessions"`
		WgPeers   float32 `json:"wg_peers"`
	}
	JSON401 *Error
}

// Status returns HTTPResponse.Status
func (r FederationPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FederationPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FederationUpdateKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r FederationUpdateKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FederationUpdateKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminDoAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminAuthResponse
	JSON401      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AdminDoAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminDoAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminListPeersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PeerRecord
}

// Status returns HTTPResponse.Status
func (r AdminListPeersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminListPeersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminCreatePeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PeerRecord
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON409      *Error
	JSON500      *Error
	JSON507      *Error
}

// Status returns HTTPResponse.Status
func (r AdminCreatePeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminCreatePeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminDeletePeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AdminDeletePeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminDeletePeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminGetPeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Peer
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AdminGetPeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminGetPeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUpdatePeerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Peer
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AdminUpdatePeerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUpdatePeerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminReloadServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AdminReloadServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminReloadServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminGetSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Settings
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AdminGetSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminGetSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUpdateSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Settings
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AdminUpdateSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUpdateSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminGetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceStatusResponse
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AdminGetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminGetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminListTrustedKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TrustedKeyRecord
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AdminListTrustedKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminListTrustedKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminDeleteTrustedKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AdminDeleteTrustedKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminDeleteTrustedKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminGetTrustedKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AdminGetTrustedKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminGetTrustedKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminAddTrustedKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON409      *Error
	JSON500      *Error
	JSON507      *Error
}

// Status returns HTTPResponse.Status
func (r AdminAddTrustedKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminAddTrustedKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUpdateTrustedKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AdminUpdateTrustedKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUpdateTrustedKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ApiClientConnectWithBodyWithResponse request with arbitrary body returning *ApiClientConnectResponse
func (c *ClientWithResponses) ApiClientConnectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiClientConnectResponse, error) {
	rsp, err := c.ApiClientConnectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiClientConnectResponse(rsp)
}

func (c *ClientWithResponses) ApiClientConnectWithResponse(ctx context.Context, body ApiClientConnectJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiClientConnectResponse, error) {
	rsp, err := c.ApiClientConnect(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiClientConnectResponse(rsp)
}

// ApiClientDisconnectWithBodyWithResponse request with arbitrary body returning *ApiClientDisconnectResponse
func (c *ClientWithResponses) ApiClientDisconnectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiClientDisconnectResponse, error) {
	rsp, err := c.ApiClientDisconnectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiClientDisconnectResponse(rsp)
}

func (c *ClientWithResponses) ApiClientDisconnectWithResponse(ctx context.Context, body ApiClientDisconnectJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiClientDisconnectResponse, error) {
	rsp, err := c.ApiClientDisconnect(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiClientDisconnectResponse(rsp)
}

// ApiClientPingWithBodyWithResponse request with arbitrary body returning *ApiClientPingResponse
func (c *ClientWithResponses) ApiClientPingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApiClientPingResponse, error) {
	rsp, err := c.ApiClientPingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiClientPingResponse(rsp)
}

func (c *ClientWithResponses) ApiClientPingWithResponse(ctx context.Context, body ApiClientPingJSONRequestBody, reqEditors ...RequestEditorFn) (*ApiClientPingResponse, error) {
	rsp, err := c.ApiClientPing(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiClientPingResponse(rsp)
}

// FederationPingWithResponse request returning *FederationPingResponse
func (c *ClientWithResponses) FederationPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FederationPingResponse, error) {
	rsp, err := c.FederationPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFederationPingResponse(rsp)
}

// FederationUpdateKeyWithBodyWithResponse request with arbitrary body returning *FederationUpdateKeyResponse
func (c *ClientWithResponses) FederationUpdateKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FederationUpdateKeyResponse, error) {
	rsp, err := c.FederationUpdateKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFederationUpdateKeyResponse(rsp)
}

func (c *ClientWithResponses) FederationUpdateKeyWithResponse(ctx context.Context, body FederationUpdateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*FederationUpdateKeyResponse, error) {
	rsp, err := c.FederationUpdateKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFederationUpdateKeyResponse(rsp)
}

// AdminDoAuthWithResponse request returning *AdminDoAuthResponse
func (c *ClientWithResponses) AdminDoAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminDoAuthResponse, error) {
	rsp, err := c.AdminDoAuth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminDoAuthResponse(rsp)
}

// AdminListPeersWithResponse request returning *AdminListPeersResponse
func (c *ClientWithResponses) AdminListPeersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminListPeersResponse, error) {
	rsp, err := c.AdminListPeers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminListPeersResponse(rsp)
}

// AdminCreatePeerWithBodyWithResponse request with arbitrary body returning *AdminCreatePeerResponse
func (c *ClientWithResponses) AdminCreatePeerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminCreatePeerResponse, error) {
	rsp, err := c.AdminCreatePeerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminCreatePeerResponse(rsp)
}

func (c *ClientWithResponses) AdminCreatePeerWithResponse(ctx context.Context, body AdminCreatePeerJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminCreatePeerResponse, error) {
	rsp, err := c.AdminCreatePeer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminCreatePeerResponse(rsp)
}

// AdminDeletePeerWithResponse request returning *AdminDeletePeerResponse
func (c *ClientWithResponses) AdminDeletePeerWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*AdminDeletePeerResponse, error) {
	rsp, err := c.AdminDeletePeer(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminDeletePeerResponse(rsp)
}

// AdminGetPeerWithResponse request returning *AdminGetPeerResponse
func (c *ClientWithResponses) AdminGetPeerWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*AdminGetPeerResponse, error) {
	rsp, err := c.AdminGetPeer(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminGetPeerResponse(rsp)
}

// AdminUpdatePeerWithBodyWithResponse request with arbitrary body returning *AdminUpdatePeerResponse
func (c *ClientWithResponses) AdminUpdatePeerWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUpdatePeerResponse, error) {
	rsp, err := c.AdminUpdatePeerWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUpdatePeerResponse(rsp)
}

func (c *ClientWithResponses) AdminUpdatePeerWithResponse(ctx context.Context, id int64, body AdminUpdatePeerJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUpdatePeerResponse, error) {
	rsp, err := c.AdminUpdatePeer(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUpdatePeerResponse(rsp)
}

// AdminReloadServiceWithResponse request returning *AdminReloadServiceResponse
func (c *ClientWithResponses) AdminReloadServiceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminReloadServiceResponse, error) {
	rsp, err := c.AdminReloadService(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminReloadServiceResponse(rsp)
}

// AdminGetSettingsWithResponse request returning *AdminGetSettingsResponse
func (c *ClientWithResponses) AdminGetSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminGetSettingsResponse, error) {
	rsp, err := c.AdminGetSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminGetSettingsResponse(rsp)
}

// AdminUpdateSettingsWithBodyWithResponse request with arbitrary body returning *AdminUpdateSettingsResponse
func (c *ClientWithResponses) AdminUpdateSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUpdateSettingsResponse, error) {
	rsp, err := c.AdminUpdateSettingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUpdateSettingsResponse(rsp)
}

func (c *ClientWithResponses) AdminUpdateSettingsWithResponse(ctx context.Context, body AdminUpdateSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUpdateSettingsResponse, error) {
	rsp, err := c.AdminUpdateSettings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUpdateSettingsResponse(rsp)
}

// AdminGetStatusWithResponse request returning *AdminGetStatusResponse
func (c *ClientWithResponses) AdminGetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminGetStatusResponse, error) {
	rsp, err := c.AdminGetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminGetStatusResponse(rsp)
}

// AdminListTrustedKeysWithResponse request returning *AdminListTrustedKeysResponse
func (c *ClientWithResponses) AdminListTrustedKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminListTrustedKeysResponse, error) {
	rsp, err := c.AdminListTrustedKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminListTrustedKeysResponse(rsp)
}

// AdminDeleteTrustedKeyWithResponse request returning *AdminDeleteTrustedKeyResponse
func (c *ClientWithResponses) AdminDeleteTrustedKeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AdminDeleteTrustedKeyResponse, error) {
	rsp, err := c.AdminDeleteTrustedKey(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminDeleteTrustedKeyResponse(rsp)
}

// AdminGetTrustedKeyWithResponse request returning *AdminGetTrustedKeyResponse
func (c *ClientWithResponses) AdminGetTrustedKeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AdminGetTrustedKeyResponse, error) {
	rsp, err := c.AdminGetTrustedKey(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminGetTrustedKeyResponse(rsp)
}

// AdminAddTrustedKeyWithBodyWithResponse request with arbitrary body returning *AdminAddTrustedKeyResponse
func (c *ClientWithResponses) AdminAddTrustedKeyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminAddTrustedKeyResponse, error) {
	rsp, err := c.AdminAddTrustedKeyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminAddTrustedKeyResponse(rsp)
}

// AdminUpdateTrustedKeyWithBodyWithResponse request with arbitrary body returning *AdminUpdateTrustedKeyResponse
func (c *ClientWithResponses) AdminUpdateTrustedKeyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUpdateTrustedKeyResponse, error) {
	rsp, err := c.AdminUpdateTrustedKeyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUpdateTrustedKeyResponse(rsp)
}

// ParseApiClientConnectResponse parses an HTTP response from a ApiClientConnectWithResponse call
func ParseApiClientConnectResponse(rsp *http.Response) (*ApiClientConnectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiClientConnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientConnectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseApiClientDisconnectResponse parses an HTTP response from a ApiClientDisconnectWithResponse call
func ParseApiClientDisconnectResponse(rsp *http.Response) (*ApiClientDisconnectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiClientDisconnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseApiClientPingResponse parses an HTTP response from a ApiClientPingWithResponse call
func ParseApiClientPingResponse(rsp *http.Response) (*ApiClientPingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiClientPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseFederationPingResponse parses an HTTP response from a FederationPingWithResponse call
func ParseFederationPingResponse(rsp *http.Response) (*FederationPingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FederationPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			IfBytesRx float32 `json:"if_bytes_rx"`
			IfBytesTx float32 `json:"if_bytes_tx"`
			Sessions  float32 `json:"sessions"`
			WgPeers   float32 `json:"wg_peers"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseFederationUpdateKeyResponse parses an HTTP response from a FederationUpdateKeyWithResponse call
func ParseFederationUpdateKeyResponse(rsp *http.Response) (*FederationUpdateKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FederationUpdateKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminDoAuthResponse parses an HTTP response from a AdminDoAuthWithResponse call
func ParseAdminDoAuthResponse(rsp *http.Response) (*AdminDoAuthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminDoAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminAuthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminListPeersResponse parses an HTTP response from a AdminListPeersWithResponse call
func ParseAdminListPeersResponse(rsp *http.Response) (*AdminListPeersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminListPeersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PeerRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAdminCreatePeerResponse parses an HTTP response from a AdminCreatePeerWithResponse call
func ParseAdminCreatePeerResponse(rsp *http.Response) (*AdminCreatePeerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminCreatePeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PeerRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 507:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON507 = &dest

	}

	return response, nil
}

// ParseAdminDeletePeerResponse parses an HTTP response from a AdminDeletePeerWithResponse call
func ParseAdminDeletePeerResponse(rsp *http.Response) (*AdminDeletePeerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminDeletePeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminGetPeerResponse parses an HTTP response from a AdminGetPeerWithResponse call
func ParseAdminGetPeerResponse(rsp *http.Response) (*AdminGetPeerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminGetPeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Peer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminUpdatePeerResponse parses an HTTP response from a AdminUpdatePeerWithResponse call
func ParseAdminUpdatePeerResponse(rsp *http.Response) (*AdminUpdatePeerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUpdatePeerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Peer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminReloadServiceResponse parses an HTTP response from a AdminReloadServiceWithResponse call
func ParseAdminReloadServiceResponse(rsp *http.Response) (*AdminReloadServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminReloadServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminGetSettingsResponse parses an HTTP response from a AdminGetSettingsWithResponse call
func ParseAdminGetSettingsResponse(rsp *http.Response) (*AdminGetSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminGetSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Settings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminUpdateSettingsResponse parses an HTTP response from a AdminUpdateSettingsWithResponse call
func ParseAdminUpdateSettingsResponse(rsp *http.Response) (*AdminUpdateSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUpdateSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Settings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminGetStatusResponse parses an HTTP response from a AdminGetStatusWithResponse call
func ParseAdminGetStatusResponse(rsp *http.Response) (*AdminGetStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminGetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminListTrustedKeysResponse parses an HTTP response from a AdminListTrustedKeysWithResponse call
func ParseAdminListTrustedKeysResponse(rsp *http.Response) (*AdminListTrustedKeysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminListTrustedKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TrustedKeyRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminDeleteTrustedKeyResponse parses an HTTP response from a AdminDeleteTrustedKeyWithResponse call
func ParseAdminDeleteTrustedKeyResponse(rsp *http.Response) (*AdminDeleteTrustedKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminDeleteTrustedKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminGetTrustedKeyResponse parses an HTTP response from a AdminGetTrustedKeyWithResponse call
func ParseAdminGetTrustedKeyResponse(rsp *http.Response) (*AdminGetTrustedKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminGetTrustedKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminAddTrustedKeyResponse parses an HTTP response from a AdminAddTrustedKeyWithResponse call
func ParseAdminAddTrustedKeyResponse(rsp *http.Response) (*AdminAddTrustedKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminAddTrustedKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 507:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON507 = &dest

	}

	return response, nil
}

// ParseAdminUpdateTrustedKeyResponse parses an HTTP response from a AdminUpdateTrustedKeyWithResponse call
func ParseAdminUpdateTrustedKeyResponse(rsp *http.Response) (*AdminUpdateTrustedKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUpdateTrustedKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// Package tunnel_admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package tunnel_admin

import (
	"context"
	"fmt"
	"net/http"
	"time"

	externalRef0 "github.com/Codename-Uranium/api/go/server/common"
	externalRef1 "github.com/Codename-Uranium/api/go/server/tunnel"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

const (
	Basic_authScopes = "Basic_auth.Scopes"
	Token_authScopes = "Token_auth.Scopes"
)

// Defines values for SettingsLogLevel.
const (
	SettingsLogLevelDebug SettingsLogLevel = "debug"

	SettingsLogLevelError SettingsLogLevel = "error"

	SettingsLogLevelInfo SettingsLogLevel = "info"

	SettingsLogLevelWarning SettingsLogLevel = "warning"
)

// AdminAuthResponse defines model for AdminAuthResponse.
type AdminAuthResponse struct {
	// JWT for accessing other administrative endpoints.
	AccessToken string `json:"access_token"`
}

// InitialSetupRequest defines model for InitialSetupRequest.
type InitialSetupRequest struct {
	AdminPassword string `json:"admin_password"`
	ServerIpMask  string `json:"server_ip_mask"`
}

// Peer representation.
type Peer struct {
	// JWT information data.
	Claims *string `json:"claims"`

	// The date when the peer was created.
	Created *time.Time `json:"created,omitempty"`

	// Peer expiration time.
	Expires     *time.Time                          `json:"expires"`
	Identifiers *externalRef0.ConnectionIdentifiers `json:"identifiers,omitempty"`

	// Wireguard-specific tunnel information.
	InfoWireguard *externalRef1.PeerWireguard `json:"info_wireguard,omitempty"`

	// Tunneling IPv4 address of a peer.
	Ipv4 *string `json:"ipv4"`

	// Label of the peer.
	Label *string `json:"label"`

	// Peer tunnel type.
	Type *externalRef1.PeerType `json:"type,omitempty"`

	// The date when the peer was updated last time.
	Updated *time.Time `json:"updated,omitempty"`
}

// PeerRecord defines model for PeerRecord.
type PeerRecord struct {
	Id int64 `json:"id"`

	// Peer representation.
	Peer Peer `json:"peer"`
}

// Current operation status.
type ServiceStatusResponse struct {
	// Indicate, whether service requires restart to apply latest settings.
	RestartRequired bool `json:"restart_required"`
}

// Server-side configuration.
type Settings struct {
	// Admin password (write-only, never returned).
	AdminPassword *string `json:"admin_password,omitempty"`

	// Admin username.
	AdminUserName     *string `json:"admin_user_name,omitempty"`
	ConnectionTimeout *int    `json:"connection_timeout,omitempty"`

	// Array of DNS servers.
	Dns *[]string `json:"dns,omitempty"`

	// HTTP listening IP:Port pair.
	HttpListenAddr *string `json:"http_listen_addr,omitempty"`

	// Logging level.
	LogLevel     *SettingsLogLevel `json:"log_level,omitempty"`
	PingInterval *int              `json:"ping_interval,omitempty"`

	// Wireguard keepalive interval.
	WireguardKeepalive *int `json:"wireguard_keepalive,omitempty"`

	// Wireguard listening port.
	WireguardListenPort *int `json:"wireguard_listen_port,omitempty"`

	// Wireguard public key (read only).
	WireguardPublicKey *string `json:"wireguard_public_key,omitempty"`

	// Public ipv4 address of a wireguard server.
	WireguardServerIpv4 *string `json:"wireguard_server_ipv4,omitempty"`

	// Public UDP port of a wireguard server.
	WireguardServerPort *int `json:"wireguard_server_port,omitempty"`

	// Wireguard subnet.
	WireguardSubnet *string `json:"wireguard_subnet,omitempty"`
}

// Logging level.
type SettingsLogLevel string

// TrustedKey defines model for TrustedKey.
type TrustedKey string

// TrustedKeyRecord defines model for TrustedKeyRecord.
type TrustedKeyRecord struct {
	Id  string     `json:"id"`
	Key TrustedKey `json:"key"`
}

// Peer representation.
type PeerInfo Peer

// ServerWireguardOptions defines model for ServerWireguardOptions.
type ServerWireguardOptions struct {
	// List of subnets, allowed to be sent to tunnel.
	AllowedIps []string `json:"allowed_ips"`

	// List of DNS servers.
	Dns []string `json:"dns"`

	// Keepalive interval to be set on client side.
	Keepalive int `json:"keepalive"`

	// Public IPv4 of a wireguard server.
	ServerIpv4 string `json:"server_ipv4"`

	// Public wireguard port.
	ServerPort int `json:"server_port"`

	// Server public key.
	ServerPublicKey string `json:"server_public_key"`
}

// Server-side configuration.
type SettingsInfo Settings

// AdminInitialSetupJSONBody defines parameters for AdminInitialSetup.
type AdminInitialSetupJSONBody InitialSetupRequest

// AdminCreatePeerJSONBody defines parameters for AdminCreatePeer.
type AdminCreatePeerJSONBody Peer

// AdminUpdatePeerJSONBody defines parameters for AdminUpdatePeer.
type AdminUpdatePeerJSONBody Peer

// AdminUpdateSettingsJSONBody defines parameters for AdminUpdateSettings.
type AdminUpdateSettingsJSONBody Settings

// AdminInitialSetupJSONRequestBody defines body for AdminInitialSetup for application/json ContentType.
type AdminInitialSetupJSONRequestBody AdminInitialSetupJSONBody

// AdminCreatePeerJSONRequestBody defines body for AdminCreatePeer for application/json ContentType.
type AdminCreatePeerJSONRequestBody AdminCreatePeerJSONBody

// AdminUpdatePeerJSONRequestBody defines body for AdminUpdatePeer for application/json ContentType.
type AdminUpdatePeerJSONRequestBody AdminUpdatePeerJSONBody

// AdminUpdateSettingsJSONRequestBody defines body for AdminUpdateSettings for application/json ContentType.
type AdminUpdateSettingsJSONRequestBody AdminUpdateSettingsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Admin authentication
	// (GET /api/tunnel/admin/auth)
	AdminDoAuth(w http.ResponseWriter, r *http.Request)
	// Get connection info for the peer
	// (GET /api/tunnel/admin/connection-info/wireguard)
	AdminConnectionInfoWireguard(w http.ResponseWriter, r *http.Request)
	// Set initial parameters
	// (POST /api/tunnel/admin/initial-setup)
	AdminInitialSetup(w http.ResponseWriter, r *http.Request)
	// List peers
	// (GET /api/tunnel/admin/peers)
	AdminListPeers(w http.ResponseWriter, r *http.Request)
	// Create peer
	// (POST /api/tunnel/admin/peers)
	AdminCreatePeer(w http.ResponseWriter, r *http.Request)
	// Delete peer
	// (DELETE /api/tunnel/admin/peers/{id})
	AdminDeletePeer(w http.ResponseWriter, r *http.Request, id int64)
	// Get peer info
	// (GET /api/tunnel/admin/peers/{id})
	AdminGetPeer(w http.ResponseWriter, r *http.Request, id int64)
	// Update peer
	// (PUT /api/tunnel/admin/peers/{id})
	AdminUpdatePeer(w http.ResponseWriter, r *http.Request, id int64)
	// Service reload
	// (GET /api/tunnel/admin/reload)
	AdminReloadService(w http.ResponseWriter, r *http.Request)
	// Get settings
	// (GET /api/tunnel/admin/settings)
	AdminGetSettings(w http.ResponseWriter, r *http.Request)
	// Update settings
	// (PATCH /api/tunnel/admin/settings)
	AdminUpdateSettings(w http.ResponseWriter, r *http.Request)
	// Server status
	// (GET /api/tunnel/admin/status)
	AdminGetStatus(w http.ResponseWriter, r *http.Request)
	// List trusted keys
	// (GET /api/tunnel/admin/trusted)
	AdminListTrustedKeys(w http.ResponseWriter, r *http.Request)
	// Delete trusted key
	// (DELETE /api/tunnel/admin/trusted/{id})
	AdminDeleteTrustedKey(w http.ResponseWriter, r *http.Request, id string)
	// Get trusted key
	// (GET /api/tunnel/admin/trusted/{id})
	AdminGetTrustedKey(w http.ResponseWriter, r *http.Request, id string)
	// Add trusted key
	// (POST /api/tunnel/admin/trusted/{id})
	AdminAddTrustedKey(w http.ResponseWriter, r *http.Request, id string)
	// Update trusted key
	// (PUT /api/tunnel/admin/trusted/{id})
	AdminUpdateTrustedKey(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// AdminDoAuth operation middleware
func (siw *ServerInterfaceWrapper) AdminDoAuth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Basic_authScopes, []string{""})

	ctx = context.WithValue(ctx, Token_authScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminDoAuth(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminConnectionInfoWireguard operation middleware
func (siw *ServerInterfaceWrapper) AdminConnectionInfoWireguard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Token_authScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminConnectionInfoWireguard(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminInitialSetup operation middleware
func (siw *ServerInterfaceWrapper) AdminInitialSetup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminInitialSetup(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminListPeers operation middleware
func (siw *ServerInterfaceWrapper) AdminListPeers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Token_authScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListPeers(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminCreatePeer operation middleware
func (siw *ServerInterfaceWrapper) AdminCreatePeer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Token_authScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreatePeer(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminDeletePeer operation middleware
func (siw *ServerInterfaceWrapper) AdminDeletePeer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Token_authScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminDeletePeer(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminGetPeer operation middleware
func (siw *ServerInterfaceWrapper) AdminGetPeer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Token_authScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetPeer(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminUpdatePeer operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdatePeer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Token_authScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdatePeer(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminReloadService operation middleware
func (siw *ServerInterfaceWrapper) AdminReloadService(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Token_authScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminReloadService(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminGetSettings operation middleware
func (siw *ServerInterfaceWrapper) AdminGetSettings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Token_authScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetSettings(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminUpdateSettings operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateSettings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Token_authScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdateSettings(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminGetStatus operation middleware
func (siw *ServerInterfaceWrapper) AdminGetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Token_authScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetStatus(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminListTrustedKeys operation middleware
func (siw *ServerInterfaceWrapper) AdminListTrustedKeys(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Token_authScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListTrustedKeys(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminDeleteTrustedKey operation middleware
func (siw *ServerInterfaceWrapper) AdminDeleteTrustedKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Token_authScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminDeleteTrustedKey(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminGetTrustedKey operation middleware
func (siw *ServerInterfaceWrapper) AdminGetTrustedKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Token_authScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetTrustedKey(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminAddTrustedKey operation middleware
func (siw *ServerInterfaceWrapper) AdminAddTrustedKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Token_authScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminAddTrustedKey(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminUpdateTrustedKey operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateTrustedKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Token_authScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdateTrustedKey(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tunnel/admin/auth", wrapper.AdminDoAuth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tunnel/admin/connection-info/wireguard", wrapper.AdminConnectionInfoWireguard)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/tunnel/admin/initial-setup", wrapper.AdminInitialSetup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tunnel/admin/peers", wrapper.AdminListPeers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/tunnel/admin/peers", wrapper.AdminCreatePeer)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/tunnel/admin/peers/{id}", wrapper.AdminDeletePeer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tunnel/admin/peers/{id}", wrapper.AdminGetPeer)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/tunnel/admin/peers/{id}", wrapper.AdminUpdatePeer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tunnel/admin/reload", wrapper.AdminReloadService)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tunnel/admin/settings", wrapper.AdminGetSettings)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/tunnel/admin/settings", wrapper.AdminUpdateSettings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tunnel/admin/status", wrapper.AdminGetStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tunnel/admin/trusted", wrapper.AdminListTrustedKeys)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/tunnel/admin/trusted/{id}", wrapper.AdminDeleteTrustedKey)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tunnel/admin/trusted/{id}", wrapper.AdminGetTrustedKey)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/tunnel/admin/trusted/{id}", wrapper.AdminAddTrustedKey)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/tunnel/admin/trusted/{id}", wrapper.AdminUpdateTrustedKey)
	})

	return r
}

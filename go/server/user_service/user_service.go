// Package user_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package user_service

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

const (
	ServiceKeyScopes  = "ServiceKey.Scopes"
	ServiceNameScopes = "ServiceName.Scopes"
)

// Auth defines model for Auth.
type Auth struct {
	AuthMethodId *string                 `json:"auth_method_id,omitempty"`
	CreatedAt    *time.Time              `json:"created_at,omitempty"`
	ExtendedInfo *map[string]interface{} `json:"extended_info,omitempty"`
	Id           *string                 `json:"id,omitempty"`
	Identifier   *string                 `json:"identifier,omitempty"`
	UpdatedAt    *time.Time              `json:"updated_at,omitempty"`
	UserId       *string                 `json:"user_id,omitempty"`
}

// AuthMethod defines model for AuthMethod.
type AuthMethod struct {
	CreatedAt *time.Time              `json:"created_at,omitempty"`
	Id        *string                 `json:"id,omitempty"`
	Name      *string                 `json:"name,omitempty"`
	ProjectId *string                 `json:"project_id,omitempty"`
	Settings  *map[string]interface{} `json:"settings,omitempty"`
	Type      *string                 `json:"type,omitempty"`
	UpdatedAt *time.Time              `json:"updated_at,omitempty"`
}

// CreatedAuth defines model for CreatedAuth.
type CreatedAuth struct {
	AuthMethodId *string                 `json:"auth_method_id"`
	ExtendedInfo *map[string]interface{} `json:"extended_info,omitempty"`
	Identifier   *string                 `json:"identifier"`
	UserId       *string                 `json:"user_id"`
}

// CreatedAuthMethod defines model for CreatedAuthMethod.
type CreatedAuthMethod struct {
	Name      *string                 `json:"name"`
	ProjectId *string                 `json:"project_id"`
	Settings  *map[string]interface{} `json:"settings,omitempty"`
	Type      *string                 `json:"type"`
}

// CreatedInvite defines model for CreatedInvite.
type CreatedInvite struct {
	Email       *string                 `json:"email"`
	ExpiresAt   *time.Time              `json:"expires_at,omitempty"`
	LocationId  *string                 `json:"location_id,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	QueryId     *string                 `json:"query_id,omitempty"`
	QueryParams *map[string]interface{} `json:"query_params,omitempty"`
	Reminded    *bool                   `json:"reminded,omitempty"`
	Telegram    *string                 `json:"telegram,omitempty"`
	TokenId     *string                 `json:"token_id"`
	UserId      *string                 `json:"user_id"`
}

// CreatedMailing defines model for CreatedMailing.
type CreatedMailing struct {
	AcceptId   *string `json:"accept_id,omitempty"`
	Accepted   *bool   `json:"accepted,omitempty"`
	Email      *string `json:"email"`
	MailingTag *string `json:"mailing_tag"`
	Status     *string `json:"status,omitempty"`
}

// CreatedProject defines model for CreatedProject.
type CreatedProject struct {
	Description *map[string]interface{} `json:"description"`
	Name        *string                 `json:"name"`
}

// CreatedSession defines model for CreatedSession.
type CreatedSession struct {
	Connected        *bool      `json:"connected,omitempty"`
	Deleted          *bool      `json:"deleted,omitempty"`
	ExpiresAt        *time.Time `json:"expires_at,omitempty"`
	FirstConnectedAt *time.Time `json:"first_connected_at,omitempty"`
	Label            *string    `json:"label"`
	Node             *string    `json:"node"`
	PeerId           *int64     `json:"peer_id,omitempty"`
	ToDelete         *bool      `json:"to_delete,omitempty"`
	TokenId          *string    `json:"token_id"`
}

// CreatedUser defines model for CreatedUser.
type CreatedUser struct {
	Description *map[string]interface{} `json:"description,omitempty"`
	Email       *string                 `json:"email,omitempty"`
	ProjectId   *string                 `json:"project_id"`
}

// Invite defines model for Invite.
type Invite struct {
	CreatedAt   *time.Time              `json:"created_at,omitempty"`
	Email       *string                 `json:"email,omitempty"`
	ExpiresAt   *time.Time              `json:"expires_at,omitempty"`
	Id          *string                 `json:"id,omitempty"`
	LocationId  *string                 `json:"location_id,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	QueryId     *string                 `json:"query_id,omitempty"`
	QueryParams *map[string]interface{} `json:"query_params,omitempty"`
	Reminded    *bool                   `json:"reminded,omitempty"`
	Telegram    *string                 `json:"telegram,omitempty"`
	TokenId     *string                 `json:"token_id,omitempty"`
	UpdatedAt   *time.Time              `json:"updated_at,omitempty"`
	UserId      *string                 `json:"user_id,omitempty"`
}

// LookupUserRequest defines model for LookupUserRequest.
type LookupUserRequest struct {
	AuthMethodId *string                 `json:"auth_method_id,omitempty"`
	ExtendedInfo *map[string]interface{} `json:"extended_info,omitempty"`
	Identifier   *string                 `json:"identifier,omitempty"`
	ProjectId    *string                 `json:"project_id,omitempty"`
}

// Mailing defines model for Mailing.
type Mailing struct {
	AcceptId   *string    `json:"accept_id,omitempty"`
	Accepted   *bool      `json:"accepted,omitempty"`
	CreatedAt  *time.Time `json:"created_at,omitempty"`
	Email      *string    `json:"email,omitempty"`
	Id         *string    `json:"id,omitempty"`
	MailingTag *string    `json:"mailing_tag,omitempty"`
	Status     *string    `json:"status,omitempty"`
	UpdatedAt  *time.Time `json:"updated_at,omitempty"`
}

// PatchedAuth defines model for PatchedAuth.
type PatchedAuth struct {
	AuthMethodId *string                 `json:"auth_method_id,omitempty"`
	ExtendedInfo *map[string]interface{} `json:"extended_info,omitempty"`
	Identifier   *string                 `json:"identifier,omitempty"`
	UpdatedAt    *time.Time              `json:"updated_at"`
	UserId       *string                 `json:"user_id,omitempty"`
}

// PatchedAuthMethod defines model for PatchedAuthMethod.
type PatchedAuthMethod struct {
	Name      *string                 `json:"name,omitempty"`
	ProjectId *string                 `json:"project_id,omitempty"`
	Settings  *map[string]interface{} `json:"settings,omitempty"`
	Type      *string                 `json:"type,omitempty"`
	UpdatedAt *time.Time              `json:"updated_at"`
}

// PatchedInvite defines model for PatchedInvite.
type PatchedInvite struct {
	Email       *string                 `json:"email,omitempty"`
	ExpiresAt   *time.Time              `json:"expires_at,omitempty"`
	LocationId  *string                 `json:"location_id,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	QueryId     *string                 `json:"query_id,omitempty"`
	QueryParams *map[string]interface{} `json:"query_params,omitempty"`
	Reminded    *bool                   `json:"reminded,omitempty"`
	Telegram    *string                 `json:"telegram,omitempty"`
	TokenId     *string                 `json:"token_id,omitempty"`
	UpdatedAt   *time.Time              `json:"updated_at"`
	UserId      *string                 `json:"user_id,omitempty"`
}

// PatchedMailing defines model for PatchedMailing.
type PatchedMailing struct {
	AcceptId   *string    `json:"accept_id,omitempty"`
	Accepted   *bool      `json:"accepted,omitempty"`
	Email      *string    `json:"email,omitempty"`
	MailingTag *string    `json:"mailing_tag,omitempty"`
	Status     *string    `json:"status,omitempty"`
	UpdatedAt  *time.Time `json:"updated_at"`
}

// PatchedProject defines model for PatchedProject.
type PatchedProject struct {
	Description *map[string]interface{} `json:"description,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	UpdatedAt   *time.Time              `json:"updated_at"`
}

// PatchedSession defines model for PatchedSession.
type PatchedSession struct {
	Connected        *bool      `json:"connected,omitempty"`
	Deleted          *bool      `json:"deleted,omitempty"`
	ExpiresAt        *time.Time `json:"expires_at,omitempty"`
	FirstConnectedAt *time.Time `json:"first_connected_at,omitempty"`
	Label            *string    `json:"label,omitempty"`
	Node             *string    `json:"node,omitempty"`
	PeerId           *int64     `json:"peer_id,omitempty"`
	ToDelete         *bool      `json:"to_delete,omitempty"`
	TokenId          *string    `json:"token_id,omitempty"`
	UpdatedAt        *time.Time `json:"updated_at"`
}

// PatchedUser defines model for PatchedUser.
type PatchedUser struct {
	Description *map[string]interface{} `json:"description,omitempty"`
	Email       *string                 `json:"email,omitempty"`
	ProjectId   *string                 `json:"project_id,omitempty"`
	UpdatedAt   *time.Time              `json:"updated_at"`
}

// PeerUser defines model for PeerUser.
type PeerUser struct {
	Params    map[string]interface{} `json:"params"`
	PeerId    int64                  `json:"peer_id"`
	PeerLabel string                 `json:"peer_label"`
	QueryId   string                 `json:"query_id"`
}

// Project defines model for Project.
type Project struct {
	CreatedAt   *time.Time              `json:"created_at,omitempty"`
	Description *map[string]interface{} `json:"description,omitempty"`
	Id          *string                 `json:"id,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	UpdatedAt   *time.Time              `json:"updated_at,omitempty"`
}

// RegisterUserRequest defines model for RegisterUserRequest.
type RegisterUserRequest struct {
	AuthMethodId *string `json:"auth_method_id,omitempty"`
	Email        *string `json:"email,omitempty"`
	Identifier   *string `json:"identifier,omitempty"`
	ProjectId    *string `json:"project_id,omitempty"`
}

// Session defines model for Session.
type Session struct {
	Connected        *bool      `json:"connected,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	Deleted          *bool      `json:"deleted,omitempty"`
	ExpiresAt        *time.Time `json:"expires_at,omitempty"`
	FirstConnectedAt *time.Time `json:"first_connected_at,omitempty"`
	Id               *string    `json:"id,omitempty"`
	Label            *string    `json:"label,omitempty"`
	Node             *string    `json:"node,omitempty"`
	PeerId           *int64     `json:"peer_id,omitempty"`
	ToDelete         *bool      `json:"to_delete,omitempty"`
	TokenId          *string    `json:"token_id,omitempty"`
	UpdatedAt        *time.Time `json:"updated_at,omitempty"`
}

// SessionDeletedParams defines model for SessionDeletedParams.
type SessionDeletedParams struct {
	Id *int64 `json:"id,omitempty"`
}

// SessionToDeleteParams defines model for SessionToDeleteParams.
type SessionToDeleteParams struct {
	Ids   *[]int64 `json:"ids,omitempty"`
	Label *string  `json:"label,omitempty"`
	Node  *string  `json:"node,omitempty"`
}

// UpdatedAuth defines model for UpdatedAuth.
type UpdatedAuth struct {
	AuthMethodId *string                 `json:"auth_method_id"`
	ExtendedInfo *map[string]interface{} `json:"extended_info"`
	Identifier   *string                 `json:"identifier"`
	UpdatedAt    *time.Time              `json:"updated_at"`
	UserId       *string                 `json:"user_id"`
}

// UpdatedAuthMethod defines model for UpdatedAuthMethod.
type UpdatedAuthMethod struct {
	Name      *string                 `json:"name"`
	ProjectId *string                 `json:"project_id"`
	Settings  *map[string]interface{} `json:"settings"`
	Type      *string                 `json:"type"`
	UpdatedAt *time.Time              `json:"updated_at"`
}

// UpdatedInvite defines model for UpdatedInvite.
type UpdatedInvite struct {
	Email       *string                 `json:"email"`
	ExpiresAt   *time.Time              `json:"expires_at"`
	LocationId  *string                 `json:"location_id"`
	Name        *string                 `json:"name"`
	QueryId     *string                 `json:"query_id"`
	QueryParams *map[string]interface{} `json:"query_params"`
	Reminded    *bool                   `json:"reminded"`
	Telegram    *string                 `json:"telegram"`
	TokenId     *string                 `json:"token_id"`
	UpdatedAt   *time.Time              `json:"updated_at"`
	UserId      *string                 `json:"user_id"`
}

// UpdatedMailing defines model for UpdatedMailing.
type UpdatedMailing struct {
	AcceptId   *string    `json:"accept_id"`
	Accepted   *bool      `json:"accepted"`
	Email      *string    `json:"email"`
	MailingTag *string    `json:"mailing_tag"`
	Status     *string    `json:"status"`
	UpdatedAt  *time.Time `json:"updated_at"`
}

// UpdatedProject defines model for UpdatedProject.
type UpdatedProject struct {
	Description *map[string]interface{} `json:"description"`
	Name        *string                 `json:"name"`
	UpdatedAt   *time.Time              `json:"updated_at"`
}

// UpdatedSession defines model for UpdatedSession.
type UpdatedSession struct {
	Connected        *bool      `json:"connected"`
	Deleted          *bool      `json:"deleted"`
	ExpiresAt        *time.Time `json:"expires_at"`
	FirstConnectedAt *time.Time `json:"first_connected_at"`
	Label            *string    `json:"label"`
	Node             *string    `json:"node"`
	PeerId           *int64     `json:"peer_id"`
	ToDelete         *bool      `json:"to_delete"`
	TokenId          *string    `json:"token_id"`
	UpdatedAt        *time.Time `json:"updated_at"`
}

// UpdatedUser defines model for UpdatedUser.
type UpdatedUser struct {
	Description *map[string]interface{} `json:"description"`
	Email       *string                 `json:"email"`
	ProjectId   *string                 `json:"project_id"`
	UpdatedAt   *time.Time              `json:"updated_at"`
}

// User defines model for User.
type User struct {
	CreatedAt   *time.Time              `json:"created_at,omitempty"`
	Description *map[string]interface{} `json:"description,omitempty"`
	Email       *string                 `json:"email,omitempty"`
	Id          *string                 `json:"id,omitempty"`
	ProjectId   *string                 `json:"project_id,omitempty"`
	UpdatedAt   *time.Time              `json:"updated_at,omitempty"`
}

// ListAuthParams defines parameters for ListAuth.
type ListAuthParams struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

// CreateAuthJSONBody defines parameters for CreateAuth.
type CreateAuthJSONBody CreatedAuth

// ListAuthMethodParams defines parameters for ListAuthMethod.
type ListAuthMethodParams struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

// CreateAuthMethodJSONBody defines parameters for CreateAuthMethod.
type CreateAuthMethodJSONBody CreatedAuthMethod

// PatchAuthMethodJSONBody defines parameters for PatchAuthMethod.
type PatchAuthMethodJSONBody PatchedAuthMethod

// UpdateAuthMethodJSONBody defines parameters for UpdateAuthMethod.
type UpdateAuthMethodJSONBody UpdatedAuthMethod

// PatchAuthJSONBody defines parameters for PatchAuth.
type PatchAuthJSONBody PatchedAuth

// UpdateAuthJSONBody defines parameters for UpdateAuth.
type UpdateAuthJSONBody UpdatedAuth

// ListEmailParams defines parameters for ListEmail.
type ListEmailParams struct {
	UserFilter string `json:"user_filter"`
	MailingTag string `json:"mailing_tag"`
	Limit      *int   `json:"limit,omitempty"`
}

// FindSessionJSONBody defines parameters for FindSession.
type FindSessionJSONBody PatchedSession

// ListInviteParams defines parameters for ListInvite.
type ListInviteParams struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

// CreateInviteJSONBody defines parameters for CreateInvite.
type CreateInviteJSONBody CreatedInvite

// PatchInviteJSONBody defines parameters for PatchInvite.
type PatchInviteJSONBody PatchedInvite

// UpdateInviteJSONBody defines parameters for UpdateInvite.
type UpdateInviteJSONBody UpdatedInvite

// LookupUserJSONBody defines parameters for LookupUser.
type LookupUserJSONBody LookupUserRequest

// ListMailingParams defines parameters for ListMailing.
type ListMailingParams struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

// CreateMailingJSONBody defines parameters for CreateMailing.
type CreateMailingJSONBody CreatedMailing

// PatchMailingJSONBody defines parameters for PatchMailing.
type PatchMailingJSONBody PatchedMailing

// UpdateMailingJSONBody defines parameters for UpdateMailing.
type UpdateMailingJSONBody UpdatedMailing

// ListProjectParams defines parameters for ListProject.
type ListProjectParams struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

// CreateProjectJSONBody defines parameters for CreateProject.
type CreateProjectJSONBody CreatedProject

// PatchProjectJSONBody defines parameters for PatchProject.
type PatchProjectJSONBody PatchedProject

// UpdateProjectJSONBody defines parameters for UpdateProject.
type UpdateProjectJSONBody UpdatedProject

// RegisterUserJSONBody defines parameters for RegisterUser.
type RegisterUserJSONBody RegisterUserRequest

// ListSessionParams defines parameters for ListSession.
type ListSessionParams struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

// CreateSessionJSONBody defines parameters for CreateSession.
type CreateSessionJSONBody CreatedSession

// ListSessionFilterParams defines parameters for ListSessionFilter.
type ListSessionFilterParams struct {
	TokenId *string   `json:"token_id,omitempty"`
	Label   *string   `json:"label,omitempty"`
	Deleted *bool     `json:"deleted,omitempty"`
	Node    *string   `json:"node,omitempty"`
	PeerIds *[]string `json:"peer_ids,omitempty"`
}

// PatchSessionJSONBody defines parameters for PatchSession.
type PatchSessionJSONBody PatchedSession

// UpdateSessionJSONBody defines parameters for UpdateSession.
type UpdateSessionJSONBody UpdatedSession

// SetSessionDeletedJSONBody defines parameters for SetSessionDeleted.
type SetSessionDeletedJSONBody SessionDeletedParams

// SetSessionToDeleteJSONBody defines parameters for SetSessionToDelete.
type SetSessionToDeleteJSONBody SessionToDeleteParams

// ListRemindInviteParams defines parameters for ListRemindInvite.
type ListRemindInviteParams struct {
	NowSec      int `json:"now_sec"`
	RemindInSec int `json:"remind_in_sec"`
}

// ListUserParams defines parameters for ListUser.
type ListUserParams struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody CreatedUser

// PatchUserJSONBody defines parameters for PatchUser.
type PatchUserJSONBody PatchedUser

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody UpdatedUser

// CreateAuthJSONRequestBody defines body for CreateAuth for application/json ContentType.
type CreateAuthJSONRequestBody CreateAuthJSONBody

// CreateAuthMethodJSONRequestBody defines body for CreateAuthMethod for application/json ContentType.
type CreateAuthMethodJSONRequestBody CreateAuthMethodJSONBody

// PatchAuthMethodJSONRequestBody defines body for PatchAuthMethod for application/json ContentType.
type PatchAuthMethodJSONRequestBody PatchAuthMethodJSONBody

// UpdateAuthMethodJSONRequestBody defines body for UpdateAuthMethod for application/json ContentType.
type UpdateAuthMethodJSONRequestBody UpdateAuthMethodJSONBody

// PatchAuthJSONRequestBody defines body for PatchAuth for application/json ContentType.
type PatchAuthJSONRequestBody PatchAuthJSONBody

// UpdateAuthJSONRequestBody defines body for UpdateAuth for application/json ContentType.
type UpdateAuthJSONRequestBody UpdateAuthJSONBody

// FindSessionJSONRequestBody defines body for FindSession for application/json ContentType.
type FindSessionJSONRequestBody FindSessionJSONBody

// CreateInviteJSONRequestBody defines body for CreateInvite for application/json ContentType.
type CreateInviteJSONRequestBody CreateInviteJSONBody

// PatchInviteJSONRequestBody defines body for PatchInvite for application/json ContentType.
type PatchInviteJSONRequestBody PatchInviteJSONBody

// UpdateInviteJSONRequestBody defines body for UpdateInvite for application/json ContentType.
type UpdateInviteJSONRequestBody UpdateInviteJSONBody

// LookupUserJSONRequestBody defines body for LookupUser for application/json ContentType.
type LookupUserJSONRequestBody LookupUserJSONBody

// CreateMailingJSONRequestBody defines body for CreateMailing for application/json ContentType.
type CreateMailingJSONRequestBody CreateMailingJSONBody

// PatchMailingJSONRequestBody defines body for PatchMailing for application/json ContentType.
type PatchMailingJSONRequestBody PatchMailingJSONBody

// UpdateMailingJSONRequestBody defines body for UpdateMailing for application/json ContentType.
type UpdateMailingJSONRequestBody UpdateMailingJSONBody

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody CreateProjectJSONBody

// PatchProjectJSONRequestBody defines body for PatchProject for application/json ContentType.
type PatchProjectJSONRequestBody PatchProjectJSONBody

// UpdateProjectJSONRequestBody defines body for UpdateProject for application/json ContentType.
type UpdateProjectJSONRequestBody UpdateProjectJSONBody

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody RegisterUserJSONBody

// CreateSessionJSONRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody CreateSessionJSONBody

// PatchSessionJSONRequestBody defines body for PatchSession for application/json ContentType.
type PatchSessionJSONRequestBody PatchSessionJSONBody

// UpdateSessionJSONRequestBody defines body for UpdateSession for application/json ContentType.
type UpdateSessionJSONRequestBody UpdateSessionJSONBody

// SetSessionDeletedJSONRequestBody defines body for SetSessionDeleted for application/json ContentType.
type SetSessionDeletedJSONRequestBody SetSessionDeletedJSONBody

// SetSessionToDeleteJSONRequestBody defines body for SetSessionToDelete for application/json ContentType.
type SetSessionToDeleteJSONRequestBody SetSessionToDeleteJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// PatchUserJSONRequestBody defines body for PatchUser for application/json ContentType.
type PatchUserJSONRequestBody PatchUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List authorisations
	// (GET /api/user-service/auth)
	ListAuth(w http.ResponseWriter, r *http.Request, params ListAuthParams)
	// Create an authorisation
	// (POST /api/user-service/auth)
	CreateAuth(w http.ResponseWriter, r *http.Request)
	// List auth methods
	// (GET /api/user-service/auth-method)
	ListAuthMethod(w http.ResponseWriter, r *http.Request, params ListAuthMethodParams)
	// Add auth method
	// (POST /api/user-service/auth-method)
	CreateAuthMethod(w http.ResponseWriter, r *http.Request)
	// Delete a auth method
	// (DELETE /api/user-service/auth-method/{id})
	DeleteAuthMethod(w http.ResponseWriter, r *http.Request, id string)
	// Get auth method
	// (GET /api/user-service/auth-method/{id})
	GetAuthMethod(w http.ResponseWriter, r *http.Request, id string)
	// Patch auth method
	// (PATCH /api/user-service/auth-method/{id})
	PatchAuthMethod(w http.ResponseWriter, r *http.Request, id string)
	// Update auth method
	// (PUT /api/user-service/auth-method/{id})
	UpdateAuthMethod(w http.ResponseWriter, r *http.Request, id string)
	// Delete a auth
	// (DELETE /api/user-service/auth/{id})
	DeleteAuth(w http.ResponseWriter, r *http.Request, id string)
	// Get a authorisation
	// (GET /api/user-service/auth/{id})
	GetAuth(w http.ResponseWriter, r *http.Request, id string)
	// Patch auth
	// (PATCH /api/user-service/auth/{id})
	PatchAuth(w http.ResponseWriter, r *http.Request, id string)
	// Update auth
	// (PUT /api/user-service/auth/{id})
	UpdateAuth(w http.ResponseWriter, r *http.Request, id string)
	// List emails
	// (GET /api/user-service/email)
	ListEmail(w http.ResponseWriter, r *http.Request, params ListEmailParams)
	// Find session
	// (GET /api/user-service/find-session)
	FindSession(w http.ResponseWriter, r *http.Request)
	// List invites
	// (GET /api/user-service/invite)
	ListInvite(w http.ResponseWriter, r *http.Request, params ListInviteParams)
	// Create an invite
	// (POST /api/user-service/invite)
	CreateInvite(w http.ResponseWriter, r *http.Request)
	// List invites
	// (GET /api/user-service/invite-by-token-id/{token_id})
	GetInviteByTokenId(w http.ResponseWriter, r *http.Request, tokenId string)
	// Delete a invite
	// (DELETE /api/user-service/invite/{id})
	DeleteInvite(w http.ResponseWriter, r *http.Request, id string)
	// Get an invite
	// (GET /api/user-service/invite/{id})
	GetInvite(w http.ResponseWriter, r *http.Request, id string)
	// Patch invite
	// (PATCH /api/user-service/invite/{id})
	PatchInvite(w http.ResponseWriter, r *http.Request, id string)
	// Update invite
	// (PUT /api/user-service/invite/{id})
	UpdateInvite(w http.ResponseWriter, r *http.Request, id string)
	// Lookup user
	// (POST /api/user-service/lookup-user)
	LookupUser(w http.ResponseWriter, r *http.Request)
	// List mailing
	// (GET /api/user-service/mailing)
	ListMailing(w http.ResponseWriter, r *http.Request, params ListMailingParams)
	// Create mailing
	// (POST /api/user-service/mailing)
	CreateMailing(w http.ResponseWriter, r *http.Request)
	// Delete a mailing
	// (DELETE /api/user-service/mailing/{id})
	DeleteMailing(w http.ResponseWriter, r *http.Request, id string)
	// Get mailing
	// (GET /api/user-service/mailing/{id})
	GetMailing(w http.ResponseWriter, r *http.Request, id string)
	// Patch mailing
	// (PATCH /api/user-service/mailing/{id})
	PatchMailing(w http.ResponseWriter, r *http.Request, id string)
	// Update mailing
	// (PUT /api/user-service/mailing/{id})
	UpdateMailing(w http.ResponseWriter, r *http.Request, id string)
	// List nodes
	// (GET /api/user-service/node-with-not-connected-peer-users)
	ListNodeWithNotConnectedPeerUsers(w http.ResponseWriter, r *http.Request)
	// List projects
	// (GET /api/user-service/project)
	ListProject(w http.ResponseWriter, r *http.Request, params ListProjectParams)
	// Create project
	// (POST /api/user-service/project)
	CreateProject(w http.ResponseWriter, r *http.Request)
	// Delete a project
	// (DELETE /api/user-service/project/{id})
	DeleteProject(w http.ResponseWriter, r *http.Request, id string)
	// Get project
	// (GET /api/user-service/project/{id})
	GetProject(w http.ResponseWriter, r *http.Request, id string)
	// Patch project
	// (PATCH /api/user-service/project/{id})
	PatchProject(w http.ResponseWriter, r *http.Request, id string)
	// Update project
	// (PUT /api/user-service/project/{id})
	UpdateProject(w http.ResponseWriter, r *http.Request, id string)
	// Register user
	// (POST /api/user-service/register-user)
	RegisterUser(w http.ResponseWriter, r *http.Request)
	// List sessions
	// (GET /api/user-service/session)
	ListSession(w http.ResponseWriter, r *http.Request, params ListSessionParams)
	// Create a session
	// (POST /api/user-service/session)
	CreateSession(w http.ResponseWriter, r *http.Request)
	// List sessions with filter
	// (GET /api/user-service/session-filter)
	ListSessionFilter(w http.ResponseWriter, r *http.Request, params ListSessionFilterParams)
	// Delete a session
	// (DELETE /api/user-service/session/{id})
	DeleteSession(w http.ResponseWriter, r *http.Request, id string)
	// Get a session
	// (GET /api/user-service/session/{id})
	GetSession(w http.ResponseWriter, r *http.Request, id string)
	// Patch session
	// (PATCH /api/user-service/session/{id})
	PatchSession(w http.ResponseWriter, r *http.Request, id string)
	// Update session
	// (PUT /api/user-service/session/{id})
	UpdateSession(w http.ResponseWriter, r *http.Request, id string)
	// Set session deleted
	// (PATCH /api/user-service/set-session-deleted)
	SetSessionDeleted(w http.ResponseWriter, r *http.Request)
	// Set session to delete
	// (PATCH /api/user-service/set-session-to-delete)
	SetSessionToDelete(w http.ResponseWriter, r *http.Request)
	// List emails
	// (GET /api/user-service/to-remind)
	ListRemindInvite(w http.ResponseWriter, r *http.Request, params ListRemindInviteParams)
	// List users
	// (GET /api/user-service/user)
	ListUser(w http.ResponseWriter, r *http.Request, params ListUserParams)
	// Create user
	// (POST /api/user-service/user)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Delete a user
	// (DELETE /api/user-service/user/{id})
	DeleteUser(w http.ResponseWriter, r *http.Request, id string)
	// Get user
	// (GET /api/user-service/user/{id})
	GetUser(w http.ResponseWriter, r *http.Request, id string)
	// Patch user
	// (PATCH /api/user-service/user/{id})
	PatchUser(w http.ResponseWriter, r *http.Request, id string)
	// Update user
	// (PUT /api/user-service/user/{id})
	UpdateUser(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// ListAuth operation middleware
func (siw *ServerInterfaceWrapper) ListAuth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAuthParams

	// ------------- Required query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAuth(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateAuth operation middleware
func (siw *ServerInterfaceWrapper) CreateAuth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAuth(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListAuthMethod operation middleware
func (siw *ServerInterfaceWrapper) ListAuthMethod(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAuthMethodParams

	// ------------- Required query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAuthMethod(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateAuthMethod operation middleware
func (siw *ServerInterfaceWrapper) CreateAuthMethod(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAuthMethod(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteAuthMethod operation middleware
func (siw *ServerInterfaceWrapper) DeleteAuthMethod(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAuthMethod(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAuthMethod operation middleware
func (siw *ServerInterfaceWrapper) GetAuthMethod(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthMethod(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchAuthMethod operation middleware
func (siw *ServerInterfaceWrapper) PatchAuthMethod(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAuthMethod(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateAuthMethod operation middleware
func (siw *ServerInterfaceWrapper) UpdateAuthMethod(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAuthMethod(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteAuth operation middleware
func (siw *ServerInterfaceWrapper) DeleteAuth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAuth(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAuth operation middleware
func (siw *ServerInterfaceWrapper) GetAuth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuth(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchAuth operation middleware
func (siw *ServerInterfaceWrapper) PatchAuth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAuth(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateAuth operation middleware
func (siw *ServerInterfaceWrapper) UpdateAuth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAuth(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListEmail operation middleware
func (siw *ServerInterfaceWrapper) ListEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEmailParams

	// ------------- Required query parameter "user_filter" -------------
	if paramValue := r.URL.Query().Get("user_filter"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "user_filter"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_filter", r.URL.Query(), &params.UserFilter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_filter", Err: err})
		return
	}

	// ------------- Required query parameter "mailing_tag" -------------
	if paramValue := r.URL.Query().Get("mailing_tag"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "mailing_tag"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "mailing_tag", r.URL.Query(), &params.MailingTag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "mailing_tag", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEmail(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FindSession operation middleware
func (siw *ServerInterfaceWrapper) FindSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindSession(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListInvite operation middleware
func (siw *ServerInterfaceWrapper) ListInvite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListInviteParams

	// ------------- Required query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListInvite(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateInvite operation middleware
func (siw *ServerInterfaceWrapper) CreateInvite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateInvite(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetInviteByTokenId operation middleware
func (siw *ServerInterfaceWrapper) GetInviteByTokenId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "token_id" -------------
	var tokenId string

	err = runtime.BindStyledParameter("simple", false, "token_id", chi.URLParam(r, "token_id"), &tokenId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInviteByTokenId(w, r, tokenId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteInvite operation middleware
func (siw *ServerInterfaceWrapper) DeleteInvite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteInvite(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetInvite operation middleware
func (siw *ServerInterfaceWrapper) GetInvite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInvite(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchInvite operation middleware
func (siw *ServerInterfaceWrapper) PatchInvite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchInvite(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateInvite operation middleware
func (siw *ServerInterfaceWrapper) UpdateInvite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateInvite(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// LookupUser operation middleware
func (siw *ServerInterfaceWrapper) LookupUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListMailing operation middleware
func (siw *ServerInterfaceWrapper) ListMailing(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMailingParams

	// ------------- Required query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMailing(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateMailing operation middleware
func (siw *ServerInterfaceWrapper) CreateMailing(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMailing(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteMailing operation middleware
func (siw *ServerInterfaceWrapper) DeleteMailing(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMailing(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMailing operation middleware
func (siw *ServerInterfaceWrapper) GetMailing(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMailing(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchMailing operation middleware
func (siw *ServerInterfaceWrapper) PatchMailing(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchMailing(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateMailing operation middleware
func (siw *ServerInterfaceWrapper) UpdateMailing(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMailing(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListNodeWithNotConnectedPeerUsers operation middleware
func (siw *ServerInterfaceWrapper) ListNodeWithNotConnectedPeerUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListNodeWithNotConnectedPeerUsers(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListProject operation middleware
func (siw *ServerInterfaceWrapper) ListProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProjectParams

	// ------------- Required query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProject(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProject(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProject(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProject(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchProject operation middleware
func (siw *ServerInterfaceWrapper) PatchProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchProject(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateProject operation middleware
func (siw *ServerInterfaceWrapper) UpdateProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProject(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListSession operation middleware
func (siw *ServerInterfaceWrapper) ListSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSessionParams

	// ------------- Required query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSession(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSession(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListSessionFilter operation middleware
func (siw *ServerInterfaceWrapper) ListSessionFilter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSessionFilterParams

	// ------------- Optional query parameter "token_id" -------------
	if paramValue := r.URL.Query().Get("token_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "token_id", r.URL.Query(), &params.TokenId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token_id", Err: err})
		return
	}

	// ------------- Optional query parameter "label" -------------
	if paramValue := r.URL.Query().Get("label"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "label", r.URL.Query(), &params.Label)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	// ------------- Optional query parameter "deleted" -------------
	if paramValue := r.URL.Query().Get("deleted"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "deleted", r.URL.Query(), &params.Deleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deleted", Err: err})
		return
	}

	// ------------- Optional query parameter "node" -------------
	if paramValue := r.URL.Query().Get("node"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "node", r.URL.Query(), &params.Node)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node", Err: err})
		return
	}

	// ------------- Optional query parameter "peer_ids" -------------
	if paramValue := r.URL.Query().Get("peer_ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "peer_ids", r.URL.Query(), &params.PeerIds)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "peer_ids", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSessionFilter(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSession(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSession operation middleware
func (siw *ServerInterfaceWrapper) GetSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSession(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchSession operation middleware
func (siw *ServerInterfaceWrapper) PatchSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchSession(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSession(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// SetSessionDeleted operation middleware
func (siw *ServerInterfaceWrapper) SetSessionDeleted(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetSessionDeleted(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// SetSessionToDelete operation middleware
func (siw *ServerInterfaceWrapper) SetSessionToDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetSessionToDelete(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListRemindInvite operation middleware
func (siw *ServerInterfaceWrapper) ListRemindInvite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRemindInviteParams

	// ------------- Required query parameter "now_sec" -------------
	if paramValue := r.URL.Query().Get("now_sec"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "now_sec"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "now_sec", r.URL.Query(), &params.NowSec)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "now_sec", Err: err})
		return
	}

	// ------------- Required query parameter "remind_in_sec" -------------
	if paramValue := r.URL.Query().Get("remind_in_sec"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "remind_in_sec"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "remind_in_sec", r.URL.Query(), &params.RemindInSec)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remind_in_sec", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRemindInvite(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListUser operation middleware
func (siw *ServerInterfaceWrapper) ListUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserParams

	// ------------- Required query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUser(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchUser operation middleware
func (siw *ServerInterfaceWrapper) PatchUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchUser(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/auth", wrapper.ListAuth)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user-service/auth", wrapper.CreateAuth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/auth-method", wrapper.ListAuthMethod)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user-service/auth-method", wrapper.CreateAuthMethod)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/user-service/auth-method/{id}", wrapper.DeleteAuthMethod)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/auth-method/{id}", wrapper.GetAuthMethod)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/user-service/auth-method/{id}", wrapper.PatchAuthMethod)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/user-service/auth-method/{id}", wrapper.UpdateAuthMethod)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/user-service/auth/{id}", wrapper.DeleteAuth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/auth/{id}", wrapper.GetAuth)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/user-service/auth/{id}", wrapper.PatchAuth)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/user-service/auth/{id}", wrapper.UpdateAuth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/email", wrapper.ListEmail)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/find-session", wrapper.FindSession)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/invite", wrapper.ListInvite)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user-service/invite", wrapper.CreateInvite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/invite-by-token-id/{token_id}", wrapper.GetInviteByTokenId)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/user-service/invite/{id}", wrapper.DeleteInvite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/invite/{id}", wrapper.GetInvite)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/user-service/invite/{id}", wrapper.PatchInvite)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/user-service/invite/{id}", wrapper.UpdateInvite)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user-service/lookup-user", wrapper.LookupUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/mailing", wrapper.ListMailing)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user-service/mailing", wrapper.CreateMailing)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/user-service/mailing/{id}", wrapper.DeleteMailing)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/mailing/{id}", wrapper.GetMailing)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/user-service/mailing/{id}", wrapper.PatchMailing)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/user-service/mailing/{id}", wrapper.UpdateMailing)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/node-with-not-connected-peer-users", wrapper.ListNodeWithNotConnectedPeerUsers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/project", wrapper.ListProject)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user-service/project", wrapper.CreateProject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/user-service/project/{id}", wrapper.DeleteProject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/project/{id}", wrapper.GetProject)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/user-service/project/{id}", wrapper.PatchProject)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/user-service/project/{id}", wrapper.UpdateProject)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user-service/register-user", wrapper.RegisterUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/session", wrapper.ListSession)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user-service/session", wrapper.CreateSession)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/session-filter", wrapper.ListSessionFilter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/user-service/session/{id}", wrapper.DeleteSession)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/session/{id}", wrapper.GetSession)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/user-service/session/{id}", wrapper.PatchSession)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/user-service/session/{id}", wrapper.UpdateSession)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/user-service/set-session-deleted", wrapper.SetSessionDeleted)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/user-service/set-session-to-delete", wrapper.SetSessionToDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/to-remind", wrapper.ListRemindInvite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/user", wrapper.ListUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user-service/user", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/user-service/user/{id}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user-service/user/{id}", wrapper.GetUser)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/user-service/user/{id}", wrapper.PatchUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/user-service/user/{id}", wrapper.UpdateUser)
	})

	return r
}

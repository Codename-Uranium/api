// Package license_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package license_service

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

const (
	ServiceKeyScopes  = "ServiceKey.Scopes"
	ServiceNameScopes = "ServiceName.Scopes"
)

// ApplyParams defines model for ApplyParams.
type ApplyParams struct {
	Email     *string `json:"email,omitempty"`
	ProjectId *string `json:"project_id,omitempty"`
	UserId    *string `json:"user_id,omitempty"`
}

// CreateLicenseParams defines model for CreateLicenseParams.
type CreateLicenseParams struct {
	Disabled         *bool                   `json:"disabled"`
	EndAt            *time.Time              `json:"end_at"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json"`
	InstallationId   *string                 `json:"installation_id"`
	ProjectId        *string                 `json:"project_id"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json"`
	SelectorJson     *map[string]interface{} `json:"selector_json"`
	StartAt          *time.Time              `json:"start_at"`
	UserId           *string                 `json:"user_id"`
}

// CreatePurchaseParams defines model for CreatePurchaseParams.
type CreatePurchaseParams struct {
	Email            *string                 `json:"email"`
	EndAt            *time.Time              `json:"end_at"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json"`
	SelectorJson     *map[string]interface{} `json:"selector_json"`
	StartAt          *time.Time              `json:"start_at"`
}

// CreateShipmentParams defines model for CreateShipmentParams.
type CreateShipmentParams struct {
	Disabled     *bool                   `json:"disabled"`
	Name         *string                 `json:"name"`
	PaymentJson  *map[string]interface{} `json:"payment_json"`
	Period       *string                 `json:"period"`
	SelectorJson *map[string]interface{} `json:"selector_json"`
	Slug         *string                 `json:"slug"`
}

// FindLicenseParams defines model for FindLicenseParams.
type FindLicenseParams struct {
	CreatedAt        *time.Time              `json:"created_at,omitempty"`
	Disabled         *bool                   `json:"disabled,omitempty"`
	EndAt            *time.Time              `json:"end_at,omitempty"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json,omitempty"`
	InstallationId   *string                 `json:"installation_id,omitempty"`
	ProjectId        *string                 `json:"project_id,omitempty"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json,omitempty"`
	SelectorJson     *map[string]interface{} `json:"selector_json,omitempty"`
	StartAt          *time.Time              `json:"start_at,omitempty"`
	UpdatedAt        *time.Time              `json:"updated_at,omitempty"`
	UserId           *string                 `json:"user_id,omitempty"`
}

// FindPurchaseParams defines model for FindPurchaseParams.
type FindPurchaseParams struct {
	CreatedAt        *time.Time              `json:"created_at,omitempty"`
	Email            *string                 `json:"email,omitempty"`
	EndAt            *time.Time              `json:"end_at,omitempty"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json,omitempty"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json,omitempty"`
	SelectorJson     *map[string]interface{} `json:"selector_json,omitempty"`
	StartAt          *time.Time              `json:"start_at,omitempty"`
	UpdatedAt        *time.Time              `json:"updated_at,omitempty"`
}

// FindShipmentParams defines model for FindShipmentParams.
type FindShipmentParams struct {
	CreatedAt    *time.Time              `json:"created_at,omitempty"`
	Disabled     *bool                   `json:"disabled,omitempty"`
	Name         *string                 `json:"name,omitempty"`
	PaymentJson  *map[string]interface{} `json:"payment_json,omitempty"`
	Period       *string                 `json:"period,omitempty"`
	SelectorJson *map[string]interface{} `json:"selector_json,omitempty"`
	Slug         *string                 `json:"slug,omitempty"`
	UpdatedAt    *time.Time              `json:"updated_at,omitempty"`
}

// License defines model for License.
type License struct {
	CreatedAt        *time.Time              `json:"created_at,omitempty"`
	Disabled         *bool                   `json:"disabled,omitempty"`
	EndAt            *time.Time              `json:"end_at,omitempty"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json,omitempty"`
	Id               *string                 `json:"id,omitempty"`
	InstallationId   *string                 `json:"installation_id,omitempty"`
	ProjectId        *string                 `json:"project_id,omitempty"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json,omitempty"`
	SelectorJson     *map[string]interface{} `json:"selector_json,omitempty"`
	StartAt          *time.Time              `json:"start_at,omitempty"`
	UpdatedAt        *time.Time              `json:"updated_at,omitempty"`
	UserId           *string                 `json:"user_id,omitempty"`
}

// PatchLicenseParams defines model for PatchLicenseParams.
type PatchLicenseParams struct {
	Disabled         *bool                   `json:"disabled,omitempty"`
	EndAt            *time.Time              `json:"end_at,omitempty"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json,omitempty"`
	InstallationId   *string                 `json:"installation_id,omitempty"`
	ProjectId        *string                 `json:"project_id,omitempty"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json,omitempty"`
	SelectorJson     *map[string]interface{} `json:"selector_json,omitempty"`
	StartAt          *time.Time              `json:"start_at,omitempty"`
	UpdatedAt        *time.Time              `json:"updated_at"`
	UserId           *string                 `json:"user_id,omitempty"`
}

// PatchPurchaseParams defines model for PatchPurchaseParams.
type PatchPurchaseParams struct {
	Email            *string                 `json:"email,omitempty"`
	EndAt            *time.Time              `json:"end_at,omitempty"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json,omitempty"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json,omitempty"`
	SelectorJson     *map[string]interface{} `json:"selector_json,omitempty"`
	StartAt          *time.Time              `json:"start_at,omitempty"`
	UpdatedAt        *time.Time              `json:"updated_at"`
}

// PatchShipmentParams defines model for PatchShipmentParams.
type PatchShipmentParams struct {
	Disabled     *bool                   `json:"disabled,omitempty"`
	Name         *string                 `json:"name,omitempty"`
	PaymentJson  *map[string]interface{} `json:"payment_json,omitempty"`
	Period       *string                 `json:"period,omitempty"`
	SelectorJson *map[string]interface{} `json:"selector_json,omitempty"`
	Slug         *string                 `json:"slug,omitempty"`
	UpdatedAt    *time.Time              `json:"updated_at"`
}

// Purchase defines model for Purchase.
type Purchase struct {
	CreatedAt        *time.Time              `json:"created_at,omitempty"`
	Email            *string                 `json:"email,omitempty"`
	EndAt            *time.Time              `json:"end_at,omitempty"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json,omitempty"`
	Id               *string                 `json:"id,omitempty"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json,omitempty"`
	SelectorJson     *map[string]interface{} `json:"selector_json,omitempty"`
	StartAt          *time.Time              `json:"start_at,omitempty"`
	UpdatedAt        *time.Time              `json:"updated_at,omitempty"`
}

// Shipment defines model for Shipment.
type Shipment struct {
	CreatedAt    *time.Time              `json:"created_at,omitempty"`
	Disabled     *bool                   `json:"disabled,omitempty"`
	Id           *string                 `json:"id,omitempty"`
	Name         *string                 `json:"name,omitempty"`
	PaymentJson  *map[string]interface{} `json:"payment_json,omitempty"`
	Period       *string                 `json:"period,omitempty"`
	SelectorJson *map[string]interface{} `json:"selector_json,omitempty"`
	Slug         *string                 `json:"slug,omitempty"`
	UpdatedAt    *time.Time              `json:"updated_at,omitempty"`
}

// UpdateLicenseParams defines model for UpdateLicenseParams.
type UpdateLicenseParams struct {
	Disabled         *bool                   `json:"disabled"`
	EndAt            *time.Time              `json:"end_at"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json"`
	InstallationId   *string                 `json:"installation_id"`
	ProjectId        *string                 `json:"project_id"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json"`
	SelectorJson     *map[string]interface{} `json:"selector_json"`
	StartAt          *time.Time              `json:"start_at"`
	UpdatedAt        *time.Time              `json:"updated_at"`
	UserId           *string                 `json:"user_id"`
}

// UpdatePurchaseParams defines model for UpdatePurchaseParams.
type UpdatePurchaseParams struct {
	Email            *string                 `json:"email"`
	EndAt            *time.Time              `json:"end_at"`
	EntitlementsJson *map[string]interface{} `json:"entitlements_json"`
	PurchaseJson     *map[string]interface{} `json:"purchase_json"`
	SelectorJson     *map[string]interface{} `json:"selector_json"`
	StartAt          *time.Time              `json:"start_at"`
	UpdatedAt        *time.Time              `json:"updated_at"`
}

// UpdateShipmentParams defines model for UpdateShipmentParams.
type UpdateShipmentParams struct {
	Disabled     *bool                   `json:"disabled"`
	Name         *string                 `json:"name"`
	PaymentJson  *map[string]interface{} `json:"payment_json"`
	Period       *string                 `json:"period"`
	SelectorJson *map[string]interface{} `json:"selector_json"`
	Slug         *string                 `json:"slug"`
	UpdatedAt    *time.Time              `json:"updated_at"`
}

// ApplyForUserByEmailJSONBody defines parameters for ApplyForUserByEmail.
type ApplyForUserByEmailJSONBody ApplyParams

// FindLicenseJSONBody defines parameters for FindLicense.
type FindLicenseJSONBody FindLicenseParams

// FindPurchaseJSONBody defines parameters for FindPurchase.
type FindPurchaseJSONBody FindPurchaseParams

// FindShipmentJSONBody defines parameters for FindShipment.
type FindShipmentJSONBody FindShipmentParams

// ListLicenseParams defines parameters for ListLicense.
type ListLicenseParams struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

// CreateLicenseJSONBody defines parameters for CreateLicense.
type CreateLicenseJSONBody CreateLicenseParams

// PatchLicenseJSONBody defines parameters for PatchLicense.
type PatchLicenseJSONBody PatchLicenseParams

// UpdateLicenseJSONBody defines parameters for UpdateLicense.
type UpdateLicenseJSONBody UpdateLicenseParams

// ListPurchaseParams defines parameters for ListPurchase.
type ListPurchaseParams struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

// CreatePurchaseJSONBody defines parameters for CreatePurchase.
type CreatePurchaseJSONBody CreatePurchaseParams

// PatchPurchaseJSONBody defines parameters for PatchPurchase.
type PatchPurchaseJSONBody PatchPurchaseParams

// UpdatePurchaseJSONBody defines parameters for UpdatePurchase.
type UpdatePurchaseJSONBody UpdatePurchaseParams

// ListShipmentParams defines parameters for ListShipment.
type ListShipmentParams struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

// CreateShipmentJSONBody defines parameters for CreateShipment.
type CreateShipmentJSONBody CreateShipmentParams

// PatchShipmentJSONBody defines parameters for PatchShipment.
type PatchShipmentJSONBody PatchShipmentParams

// UpdateShipmentJSONBody defines parameters for UpdateShipment.
type UpdateShipmentJSONBody UpdateShipmentParams

// ApplyForUserByEmailJSONRequestBody defines body for ApplyForUserByEmail for application/json ContentType.
type ApplyForUserByEmailJSONRequestBody ApplyForUserByEmailJSONBody

// FindLicenseJSONRequestBody defines body for FindLicense for application/json ContentType.
type FindLicenseJSONRequestBody FindLicenseJSONBody

// FindPurchaseJSONRequestBody defines body for FindPurchase for application/json ContentType.
type FindPurchaseJSONRequestBody FindPurchaseJSONBody

// FindShipmentJSONRequestBody defines body for FindShipment for application/json ContentType.
type FindShipmentJSONRequestBody FindShipmentJSONBody

// CreateLicenseJSONRequestBody defines body for CreateLicense for application/json ContentType.
type CreateLicenseJSONRequestBody CreateLicenseJSONBody

// PatchLicenseJSONRequestBody defines body for PatchLicense for application/json ContentType.
type PatchLicenseJSONRequestBody PatchLicenseJSONBody

// UpdateLicenseJSONRequestBody defines body for UpdateLicense for application/json ContentType.
type UpdateLicenseJSONRequestBody UpdateLicenseJSONBody

// CreatePurchaseJSONRequestBody defines body for CreatePurchase for application/json ContentType.
type CreatePurchaseJSONRequestBody CreatePurchaseJSONBody

// PatchPurchaseJSONRequestBody defines body for PatchPurchase for application/json ContentType.
type PatchPurchaseJSONRequestBody PatchPurchaseJSONBody

// UpdatePurchaseJSONRequestBody defines body for UpdatePurchase for application/json ContentType.
type UpdatePurchaseJSONRequestBody UpdatePurchaseJSONBody

// CreateShipmentJSONRequestBody defines body for CreateShipment for application/json ContentType.
type CreateShipmentJSONRequestBody CreateShipmentJSONBody

// PatchShipmentJSONRequestBody defines body for PatchShipment for application/json ContentType.
type PatchShipmentJSONRequestBody PatchShipmentJSONBody

// UpdateShipmentJSONRequestBody defines body for UpdateShipment for application/json ContentType.
type UpdateShipmentJSONRequestBody UpdateShipmentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Copy all purchases find by email and create new licenses for user in given project
	// (GET /api/license-service/apply-for-user-by-email)
	ApplyForUserByEmail(w http.ResponseWriter, r *http.Request)
	// Find license
	// (GET /api/license-service/find-license)
	FindLicense(w http.ResponseWriter, r *http.Request)
	// Find purchase
	// (GET /api/license-service/find-purchase)
	FindPurchase(w http.ResponseWriter, r *http.Request)
	// Find shipment
	// (GET /api/license-service/find-shipment)
	FindShipment(w http.ResponseWriter, r *http.Request)
	// List licenses
	// (GET /api/license-service/license)
	ListLicense(w http.ResponseWriter, r *http.Request, params ListLicenseParams)
	// Create license
	// (POST /api/license-service/license)
	CreateLicense(w http.ResponseWriter, r *http.Request)
	// Delete a license
	// (DELETE /api/license-service/license/{id})
	DeleteLicense(w http.ResponseWriter, r *http.Request, id string)
	// Get license
	// (GET /api/license-service/license/{id})
	GetLicense(w http.ResponseWriter, r *http.Request, id string)
	// Patch license
	// (PATCH /api/license-service/license/{id})
	PatchLicense(w http.ResponseWriter, r *http.Request, id string)
	// Update license
	// (PUT /api/license-service/license/{id})
	UpdateLicense(w http.ResponseWriter, r *http.Request, id string)
	// List purchases
	// (GET /api/license-service/purchase)
	ListPurchase(w http.ResponseWriter, r *http.Request, params ListPurchaseParams)
	// Create purchase
	// (POST /api/license-service/purchase)
	CreatePurchase(w http.ResponseWriter, r *http.Request)
	// Delete a purchase
	// (DELETE /api/license-service/purchase/{id})
	DeletePurchase(w http.ResponseWriter, r *http.Request, id string)
	// Get purchase
	// (GET /api/license-service/purchase/{id})
	GetPurchase(w http.ResponseWriter, r *http.Request, id string)
	// Patch purchase
	// (PATCH /api/license-service/purchase/{id})
	PatchPurchase(w http.ResponseWriter, r *http.Request, id string)
	// Update purchase
	// (PUT /api/license-service/purchase/{id})
	UpdatePurchase(w http.ResponseWriter, r *http.Request, id string)
	// List shipments
	// (GET /api/license-service/shipment)
	ListShipment(w http.ResponseWriter, r *http.Request, params ListShipmentParams)
	// Create shipment
	// (POST /api/license-service/shipment)
	CreateShipment(w http.ResponseWriter, r *http.Request)
	// Delete a shipment
	// (DELETE /api/license-service/shipment/{id})
	DeleteShipment(w http.ResponseWriter, r *http.Request, id string)
	// Get shipment
	// (GET /api/license-service/shipment/{id})
	GetShipment(w http.ResponseWriter, r *http.Request, id string)
	// Patch shipment
	// (PATCH /api/license-service/shipment/{id})
	PatchShipment(w http.ResponseWriter, r *http.Request, id string)
	// Update shipment
	// (PUT /api/license-service/shipment/{id})
	UpdateShipment(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// ApplyForUserByEmail operation middleware
func (siw *ServerInterfaceWrapper) ApplyForUserByEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ApplyForUserByEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FindLicense operation middleware
func (siw *ServerInterfaceWrapper) FindLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindLicense(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FindPurchase operation middleware
func (siw *ServerInterfaceWrapper) FindPurchase(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPurchase(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FindShipment operation middleware
func (siw *ServerInterfaceWrapper) FindShipment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindShipment(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListLicense operation middleware
func (siw *ServerInterfaceWrapper) ListLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLicenseParams

	// ------------- Required query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLicense(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateLicense operation middleware
func (siw *ServerInterfaceWrapper) CreateLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLicense(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteLicense operation middleware
func (siw *ServerInterfaceWrapper) DeleteLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLicense(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetLicense operation middleware
func (siw *ServerInterfaceWrapper) GetLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLicense(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchLicense operation middleware
func (siw *ServerInterfaceWrapper) PatchLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchLicense(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateLicense operation middleware
func (siw *ServerInterfaceWrapper) UpdateLicense(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLicense(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListPurchase operation middleware
func (siw *ServerInterfaceWrapper) ListPurchase(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPurchaseParams

	// ------------- Required query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPurchase(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreatePurchase operation middleware
func (siw *ServerInterfaceWrapper) CreatePurchase(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePurchase(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeletePurchase operation middleware
func (siw *ServerInterfaceWrapper) DeletePurchase(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePurchase(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPurchase operation middleware
func (siw *ServerInterfaceWrapper) GetPurchase(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPurchase(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchPurchase operation middleware
func (siw *ServerInterfaceWrapper) PatchPurchase(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchPurchase(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdatePurchase operation middleware
func (siw *ServerInterfaceWrapper) UpdatePurchase(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePurchase(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListShipment operation middleware
func (siw *ServerInterfaceWrapper) ListShipment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListShipmentParams

	// ------------- Required query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListShipment(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateShipment operation middleware
func (siw *ServerInterfaceWrapper) CreateShipment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateShipment(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteShipment operation middleware
func (siw *ServerInterfaceWrapper) DeleteShipment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteShipment(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetShipment operation middleware
func (siw *ServerInterfaceWrapper) GetShipment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetShipment(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchShipment operation middleware
func (siw *ServerInterfaceWrapper) PatchShipment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchShipment(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateShipment operation middleware
func (siw *ServerInterfaceWrapper) UpdateShipment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ServiceKeyScopes, []string{""})

	ctx = context.WithValue(ctx, ServiceNameScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateShipment(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/apply-for-user-by-email", wrapper.ApplyForUserByEmail)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/find-license", wrapper.FindLicense)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/find-purchase", wrapper.FindPurchase)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/find-shipment", wrapper.FindShipment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/license", wrapper.ListLicense)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/license-service/license", wrapper.CreateLicense)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/license-service/license/{id}", wrapper.DeleteLicense)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/license/{id}", wrapper.GetLicense)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/license-service/license/{id}", wrapper.PatchLicense)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/license-service/license/{id}", wrapper.UpdateLicense)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/purchase", wrapper.ListPurchase)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/license-service/purchase", wrapper.CreatePurchase)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/license-service/purchase/{id}", wrapper.DeletePurchase)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/purchase/{id}", wrapper.GetPurchase)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/license-service/purchase/{id}", wrapper.PatchPurchase)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/license-service/purchase/{id}", wrapper.UpdatePurchase)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/shipment", wrapper.ListShipment)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/license-service/shipment", wrapper.CreateShipment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/license-service/shipment/{id}", wrapper.DeleteShipment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/license-service/shipment/{id}", wrapper.GetShipment)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/license-service/shipment/{id}", wrapper.PatchShipment)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/license-service/shipment/{id}", wrapper.UpdateShipment)
	})

	return r
}
